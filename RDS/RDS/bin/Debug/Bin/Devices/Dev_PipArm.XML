<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dev_PipArm</name>
    </assembly>
    <members>
        <member name="T:Sias.PipArm.SDetectionPar">
            <summary>
            Detection parameter class.
            
            This parameter class is used to define 
                \ref sec_LiquidDetection, 
                \ref sec_DoubleDetection,
                \ref sec_Tracking,
                \ref sec_ErrorHandling,
                \ref sec_RetractFromLiquid (tip withdraw) and
                \ref sec_ClotDetection
            parameters.
            
            \b Important:   Not each method getting a SDetectionPar parameter will recoginze/use
                            all parameters defined by SDetectionPar.
            
            for more details see section "\ref DetectionPar" on page "\ref PipettingMethods".
            
            </summary>
            <remarks>
             - some properties are not independent e.g. property LiquidDetection is changing/reflecting
               UseLiquidDetection, FirstDetectionWithSingleTip and FirstDetectionWithEvenOdd.
            </remarks>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar._Mode">
            <summary>Detection mode field</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar._ScanSpeed">
            <summary>Detection scan speed field</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar._RetractSpeed">
            <summary>Retract speed field</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar._Submerge">
            <summary>Submerge field [mm]</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar._Retract">
            <summary>Retract way [mm] field</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar._DoubleLQCheckOffset">
            <summary>Double detection retract offset [mm] field</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar._LQMaxDeviation">
            <summary>Allowed deviation at double detection [mm] field</summary>
        </member>
        <member name="M:Sias.PipArm.SDetectionPar.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a detection parameter instance by data.
            </summary>
            <param name="Mode">Detection mode</param>
            <param name="ScanSpeed">Scan Speed [mm/s]</param>
            <param name="RetractSpeed">Retract speed [mm/s]</param>
            <param name="Submerge">Submerge [mm]</param>
            <param name="Retract">Retract way [mm]</param>
            <param name="DoubleLQCheckOffset">Double liquid retract way [mm]</param>
            <param name="LQMaxDeviation">Allowed double liquid position deviation</param>
        </member>
        <member name="M:Sias.PipArm.SDetectionPar.#ctor">
            <summary>
            Create default detection parameter instance.
            </summary>
        </member>
        <member name="M:Sias.PipArm.SDetectionPar.#ctor(System.Int32)">
            <summary>
            Create default detection parameter by detection mode.
            </summary>
            <param name="Mode"></param>
        </member>
        <member name="M:Sias.PipArm.SDetectionPar.#ctor(Sias.PipArm.SDetectionPar)">
            <summary>
            Initializes a new instance of the <b>SDetectionPar</b> class.
            </summary>
            <param name="OrgPar"></param>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.ModeValue">
            <summary>
            Detection mode as integer property.
            
            The mode value includes the detection parameter flags, detection modes and 
            the liquid detector Sensitivity in a packed form. This is mainly used for 
            serialization and de-serialization. It is not recommended to use this parameter
            in custom applications.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.DetectMode">
            <summary>
            Detection mode as enumerator property.
            
            The mode value includes the detection parameter flags, detection modes and 
            the liquid detector Sensitivity in a packed form. This is mainly used for 
            visualization in (smart) property grids. It is not recommended to use this 
            parameter in custom applications.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.LiquidDetection">
            <summary>
            Liquid detection mode (first/main detection) property
            
            This property defines the detection mode for first (main) liquid detection.\n
            Possible Values:
             - LiquidDetectionMode.NoDetection: no liquid detection
             - LiquidDetectionMode.AllTips:     First liquid detection with all tips
             - LiquidDetectionMode.SingleTips:  First liquid detection tip by tip
             - LiquidDetectionMode.EvenOddTips: First liquid detection in even/odd tip groups
             .
            \b Important:   This property will reflect/overwrite the SDetectionPar.UseLiquidDetection,
                            SDetectionPar.FirstDetectionWithEvenOdd and SDetectionPar.FirstDetectionWithSingleTip
                            properties!
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.SecondDetection">
            <summary>
            Double liquid detection mode (second/third detection) property
            
            This property defines the detection mode for second or third liquid detection.\n
            Possible Values:
             - LiquidDetectionMode.NoDetection: No double liquid detection
             - LiquidDetectionMode.AllTips:     Second/third liquid detection with all tips
             - LiquidDetectionMode.SingleTips:  Second/third liquid detection tip by tip
             - LiquidDetectionMode.EvenOddTips: Second/third liquid detection in even/odd tip groups
             .
            If no first/main detection is activated this property is ignored.
            \b Important:   This property will reflect/overwrite the SDetectionPar.DoubleDetection,
                            SDetectionPar.SecondDetectionWithEvenOdd and SDetectionPar.SecondDetectionWithSingleTip
                            properties!
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.UseLiquidDetection">
            <summary>
            Use liquid detection flag
            
            This flag is used to activte/deactivate liquid detection. 
            Take care this flag gets reflected/overwritten by the 
            SDetectionPar.SecondDetection property.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.FirstDetectionWithSingleTip">
            <summary>
            Single tip detection flag
            
            This flag is used to activte/deactivate single tip liquid detection. 
            This flag is ignored if UseLiquidDetection if deactivated.
            Take care this flag gets reflected/overwritten by the 
            SDetectionPar.LiquidDetection property.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.FirstDetectionWithEvenOdd">
            <summary>
            Even/Odd detection flag
            
            This flag is used to activte/deactivate even/odd tip liquid detection. 
            This flag is ignored if UseLiquidDetection if deactivated.
            Take care this flag gets reflected/overwritten by the 
            SDetectionPar.LiquidDetection property.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.UseTracking">
            <summary>
            Use tracking flag
            
            This flag is used to activate/deactivate tracking (following the liquid surface). 
            If tracking is deactivated you have to take care about the submerge to be sure 
            picking liquid not air.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.TurnOffUnusedSensors">
            <summary>
            Turn off the liquid sensors of all unused tips on the same arm
            
            This flag is used to force deactivation of unused liquid sensors.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.DisplayErrors">
            <summary>
            Display detection error flag
            
            This flag is used to activate/deactivate error reporting. If true
            liquid detection errors are reported using to the error manager.
            \b Important:   If the application suppresses visualization of errors there
                            will be no error "display" even if DisplayErrors is true!
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.AutoIgnore">
            <summary>
            Auto ignore at detection errors flag
            
            This flag is used to activate/deactivate auto ignore. 
            If Auto Ignore is activated detection errors will be ignored instead of skipped.
            \b Important:   This flag is only recognized if DisplayErrors is deactivated 
                            and no remaining AutoRetry is pending!
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.AutoRetry">
            <summary>
            Auto retry at detection errors flag
            
            This flag is used to activate/deactivate auto retry on detection errors.
            If auto retry is activated the system tries to recover the error up to three 
            times. After this retries the system will handle the error as if AutoRetry
            is not active.
            \b Important:   This flag is only recognized if DisplayErrors is deactivated!
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.SetVolumeToCavity">
            <summary>
            Set volume to cavity liquid volume
            
            This property is used to activate automatic cavity volume setting. 
            If SetVolumeToCavity is activated the system will set/correct the liquid
            state of the cavity depending on the detection result (height). 
            </summary>
            <remarks>
             - If SetVolumeToCavity is deactivated and no liquid is set on a cavity the
               History entries will be incomplete.
             - If SetVolumeToCavity is activated and the detected volume will differ
               from theoretical volume in cavity it will be corrected/changed.
             - If SetVolumeToCavity is activated you may do another aspirate/dispense 
               relative to the liquid surface without another liquid detection.
            </remarks>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.LimitVolumeToPickable">
            <summary>
            Limit aspiration volume to the really pickable volume in cavity
            
            This property is used to limit the aspiration volume to known pickable liquid 
            volume in cavity. When used in combination with liquid detection this will allow 
            to pick whatever is left in the tube.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.Sensitivity">
            <summary>
            Liquid detector sensitivity mode
            
            This property defines the used liquid detector sensitivity mode. 
            The standard %sias robots have up to 4 predefined liquid detector sensitivities:
             - 0: Sensitivity used for detections in tubes, troughs or other big containers. (default value)
             - 1: Sensitivity used for detections in MTPs, DWPs or other small containers.
             - 2: Sensitivity used for detections in tubes, troughs or other big containers 
                  using disposable tips. (this is not setup on each robot!)
             - 3: Sensitivity used for detections in MTPs, DWPs or other small containers
                  using disposable tips. (this is not setup on each robot!)
             .
            \b Important:   On special robot the sensitivity modes may differ from above 
                            default sensitivity modes. 
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.UseClotDetection">
            <summary>
            Use clot detection flag
            
            This property is used to activate/deactivate clot detection. Some liquids
            may contain clots (solid parts that may clog the tip). Clots may block the 
            aspiration and may be more dangerous they may hang on the tip after 
            aspiration. \n
            If UseClotDetection is activated the system will try to detect clots by 
            moving the tips above the (calculated) liquid surface to check if the 
            liquid detection flag is reset.\n
            It is recommended to use clot detection in combination with liquid 
            detection.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.DoubleDetection">
            <summary>
            Double liquid detection flag
            
            This flag is used to activte/deactivate double liquid detection. 
            Take care this flag gets reflected/overwritten by the 
            SDetectionPar.SecondDetection property.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.SecondDetectionWithSingleTip">
            <summary>
            Single tip double detection flag
            
            This flag is used to activte/deactivate single tip detection 
            on the second liquid detection. This flag is ignored if 
            DoubleDetection if deactivated.
            Take care this flag gets reflected/overwritten by the 
            SDetectionPar.SecondDetection property.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.SecondDetectionWithEvenOdd">
            <summary>
            Even/Odd double detection flag
            
            This flag is used to activte/deactivate even/odd tip detection 
            on the second liquid detection. This flag is ignored if 
            DoubleDetection if deactivated.
            Take care this flag gets reflected/overwritten by the 
            SDetectionPar.SecondDetection property.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.CheckEmptyDetection">
            <summary>Check empty cavity flag (only at dispense)</summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.ScanSpeed">
            <summary>
            Detection scan speed property
            
            This property defines the Z motor speed used for liquid detection. In General 
            this speed depends on he used liquid detector sensitivity. Typically higher
            sensitivities will need lower scan speeds to avoid air detections.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.RetractSpeed">
            <summary>
            Retract speed property (how fast to move out of the liquid)
            
            This property is used to define the speed used for "Retract". 
            That means it defines the speed used for moving "out of the liquid".
            If the retract speed is too high you may get a liquid drop at after leaving
            the liquid.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.Submerge">
            <summary>
            Submerge [mm] property
            
            This property defines the used submerge. On picking up liquid it is needed
            to be below the liquid surface to avoid picking a liquid /air mixture instead 
            of liquid only. The submerge parameter defines how deep the tip is submerged.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.Retract">
            <summary>
            Retract way [mm] property
            
            This property defines the retract way. The retract way is the expected 
            distance between the tip and the liquid surface after retract. This is 
            mostly important for clot detection as the Retract way defines the minimum 
            detectable clot size.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.DoubleLQCheckOffset">
            <summary>
            Double detection retract offset [mm] property
            
            This property defines the double detection retract offset. This is the way to move 
            back between the first and second or the second and third detection.\n
            \b Important:   The double liquid detection retract is limited to the origin scan 
                            start position!
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionPar.LQMaxDeviation">
            <summary>
            Allowed deviation at double detection [mm] property
            
            This property defines the maximum acceptable deviation on double liquid detection.
            On double liquid detection the system tries to detect at least two times. If the 
            position deviation between the two detection is below SDetectionPar.LQMaxDeviation
            the detection is accepted.
            </summary>
        </member>
        <member name="T:Sias.PipArm.SDetectionPar.ModeMask">
            <summary>
            Detection mode mask enumerator
            
            This enumerator can be used as readable parameters for the SDetectionPar constructor.
            However, mostly it will be more readable to define the detection parameters by assigning 
            the SDetectionPar properties explicit.
            </summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar.ModeMask.UseLiquidDetection">
            <summary>Use liquid detection bit mask</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar.ModeMask.FirstDetectionWithSingleTip">
            <summary>Use single tips for first detection bit mask</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar.ModeMask.FirstDetectionWithEvenOdd">
            <summary>Use even/odd tip groups for first detection bit mask</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar.ModeMask.UseTracking">
            <summary>Use tracking bit mask</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar.ModeMask.TurnOffUnusedSensors">
            <summary>Turn off unused level sensors bit mask</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar.ModeMask.DisplayErrors">
            <summary>Display liquid detection errors bit mask</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar.ModeMask.AutoIgnore">
            <summary>Auto ignore at liquid detection errors bit mask</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar.ModeMask.AutoRetry">
            <summary>Auto retry at liquid detection errors bit mask</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar.ModeMask.Sensitivity">
            <summary>Sensitivity bits (sensitivity 0..15)</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar.ModeMask.SetVolumeToCavity">
            <summary>Set volume to cavity when detected bit mask</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar.ModeMask.LimitVolumeToPickable">
            <summary>Limit aspiration volume to pickable volume if too less liquid found bit mask</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar.ModeMask.UseClotDetection">
            <summary>Use clot detection bit mask</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar.ModeMask.DoubleDetection">
            <summary>Use double detection bit mask</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar.ModeMask.SecondDetectionWithSingleTip">
            <summary>Use single tips for second/third detection bit mask (only usable with DoubleDetection)</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar.ModeMask.SecondDetectionWithEvenOdd">
            <summary>Use even/odd tip groups for second/third detection bit mask (only usable with DoubleDetection)</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar.ModeMask.CheckEmptyDetection">
            <summary>Check empty tube detection bit mask</summary>
        </member>
        <member name="T:Sias.PipArm.SDetectionPar.LiquidDetectionMode">
            <summary>
            Liquid detection mode.
            
            This enumerator is used for first and second liquid detection mode.
            </summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar.LiquidDetectionMode.NoDetection">
            <summary>liquid detection off</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar.LiquidDetectionMode.AllTips">
            <summary>liquid detection with all tips together</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar.LiquidDetectionMode.SingleTips">
            <summary>liquid detection tip by tip (each tip separate)</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionPar.LiquidDetectionMode.EvenOddTips">
            <summary>liquid detection with even/odd tip groups</summary>
        </member>
        <member name="T:Sias.PipArm.SPipettingPar">
             <summary>
             Pipetting parameter class.
             
             This class defines the pipetting parameters for all tips of a pipetting arm.
             They are used as parameters to the pipetting arms pipetting methods. So it is very 
             important to define the right number of tips for the pipetting arm the parameters
             are used with.\n
             The class defines 
              - a Volume, 
              - precision parameters (speed and ramp) and 
              - a Z offset 
              .
             for each tip.\n
            
             In addition it defines a Z positioning mode. The Z positioning mode defines 
             the position where the pipetting (aspiration or dispensing) is done. \n
             The following Z positioning modes are supported:
              - DefaultPosition (0):			ZOffset is relative to operations default height
              - RelativeToTravelHeight(1):	ZOffset is relative to the cavities travel height
              - RelativeToScanHeight(2):		ZOffset is relative to the cavities scan height
              - RelativeToDispenseHeight(3):	ZOffset is relative to the cavities dispense height
              - RelativeToMaxHeight(4):		ZOffset is relative to the cavities max. height (cavity bottom).
              - RelativeToLiquidPosition(5):	ZOffset is relative to the cavities liquid height. 
              .
             For more details see ZMode property.
             
             \b Notes \n
              - Positive offsets are above the reference height. To define a position 
                of 5 mm below scan height, an offset of -5 is needed.
              - Some methods getting a pipetting parameter class may ignore the Z positioning 
                mode and the Z offset!
              .
             </summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingPar._PipPar">
            <summary>pipetting parameter array field</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingPar._Mode">
            <summary>Z positioning mode field</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingPar._ZOffset">
            <summary>Z position offset array field</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingPar._Options">
            <summary>Pipetting options field</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingPar._Delay">
            <summary>Pipetting delay [ms] field</summary>
        </member>
        <member name="M:Sias.PipArm.SPipettingPar.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double,Sias.PipArm.SPipettingPar.ModeConst,System.Double,System.Int32)">
            <summary>
            Create a pipetting parameter array with the same parameters for all tips.
            </summary>
            <param name="MaxTip">No of tips (pipetting parameter blocks)</param>
            <param name="Vol">Volume for all pipetting parameter blocks</param>
            <param name="Speed">Speed for all pipetting parameter blocks</param>
            <param name="Accel">Acceleration for all pipetting parameter blocks</param>
            <param name="StopSpeed">Stop speed for all pipetting parameter blocks</param>
            <param name="mode">Z positioning mode (\b see SPipettingPar.ModeConst)</param>
            <param name="Offset">Z position offset</param>
            <param name="Delay">Pipetting delay</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingPar.#ctor(System.Int32,System.Double,System.Double,System.Double,Sias.PipArm.SPipettingPar.ModeConst,System.Double)">
            <summary>
            Create a pipetting parameter array with the same parameters for all tips.
            </summary>
            <param name="MaxTip">No of tips (pipetting parameter blocks)</param>
            <param name="Vol">Volume for all pipetting parameter blocks</param>
            <param name="Speed">Speed for all pipetting parameter blocks</param>
            <param name="Accel">Acceleration for all pipetting parameter blocks</param>
            <param name="mode">Z positioning mode (\b see SPipettingPar.ModeConst)</param>
            <param name="Offset">Z position offset</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingPar.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Create a pipetting parameter array with the same parameters for all tips.
            </summary>
            <param name="MaxTip">No of tips (pipetting parameter blocks)</param>
            <param name="Vol">Volume for all pipetting parameter blocks</param>
            <param name="Speed">Speed for all pipetting parameter blocks</param>
            <param name="Accel">Acceleration for all pipetting parameter blocks</param>
            <param name="Delay">pipetting delay</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingPar.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Create a pipetting parameter array with the same parameters for all tips.
            </summary>
            <param name="MaxTip">No of tips (pipetting parameter blocks)</param>
            <param name="Vol">Volume for all pipetting parameter blocks</param>
            <param name="Speed">Speed for all pipetting parameter blocks</param>
            <param name="Accel">Acceleration for all pipetting parameter blocks</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingPar.#ctor(System.Int32)">
            <summary>
            Create a pipetting parameter array with MaxTip empty elements.
            </summary>
            <param name="MaxTip">No of tips (pipetting parameter blocks)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingPar.#ctor">
            <summary>
            Create a pipetting parameter array with 8 empty pipetting parameter blocks.
            </summary>
        </member>
        <member name="M:Sias.PipArm.SPipettingPar.#ctor(Sias.PipArm.SPipettingPar)">
            <summary>
            Create a copy of the given pipetting parameter class.
            </summary>
            <param name="OrgPar">The base of the new pipetting parameter class</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingPar.MaxVol(Sias.PipArm.STipMap)">
            <summary>
            Calculate the maximum volume of all selected pipetting parameters in list.
            </summary>
            <param name="Tips">Tip map to select the pipetting parameters</param>
            <returns>Maximum volume</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingPar.MaxVol">
            <summary>
            Calculate the maximum volume of all pipetting parameters in list.
            </summary>
            <returns>Maximum volume</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingPar.ZAbsPos(Sias.Core.Interfaces.SCavityCollection,System.Double[])">
            <summary>
            Calculate the Z positions.\n 
            
            \b Note: The positions may be absolute or relative depending on the used
            positioning mode. For details please see <see cref="P:Sias.PipArm.SPipettingPar.ZMode"/>.
            </summary>
            <param name="Cav">Cavities list</param>
            <param name="DefaultPos">Default Z positions</param>
            <returns>Z position array</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingPar.ZAbsPos(Sias.Core.Interfaces.SCavityCollection)">
            <summary>
            Calculate the Z positions.\n
            \b Note: The positions may be absolute or relative depending on the used
            positioning mode.
            </summary>
            <param name="Cav">Cavities list</param>
            <returns></returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingPar.VolumeSum(Sias.PipArm.STipMap)">
            <summary>
            Calculate the sum of all volumes selected by parameter tips.
            </summary>
            <param name="Tips">Tip selection</param>
            <returns>Sum of volumes</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingPar.pSpeedSum(Sias.PipArm.STipMap)">
            <summary>
            Calculate the sum of all volumes selected by parameter Tips.
            </summary>
            <param name="Tips">Tip selection</param>
            <returns>Sum of volumes</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingPar.op_Addition(Sias.PipArm.SPipettingPar,Sias.PipArm.SPipettingPar)">
            <summary>
            Add the volumes of two pipetting parameter arrays.
            </summary>
            <param name="a">first pipetting parameter array</param>
            <param name="b">first pipetting parameter array</param>
            <returns>a new pipetting parameter array with the volume sum of a and b 
            and the other parameters of a</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingPar.op_Addition(Sias.PipArm.SPipettingPar,System.Double)">
            <summary>
            Add the defined volume to a pipetting parameter array.
            </summary>
            <param name="a">Pipetting parameter array</param>
            <param name="b">Additional volume</param>
            <returns>a new pipetting parameter array with an increased volume</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingPar.op_Subtraction(Sias.PipArm.SPipettingPar,Sias.PipArm.SPipettingPar)">
            <summary>
            Subtract the volumes of one pipetting parameter array of the volumes from another.
            </summary>
            <param name="a">First pipetting parameter array</param>
            <param name="b">Second pipetting parameter array</param>
            <returns>A new first pipetting parameter array with the volume difference of a and b 
            and the other parameters of a</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingPar.op_Subtraction(Sias.PipArm.SPipettingPar,System.Double)">
            <summary>
            Subtract a defined volume from a pipetting parameter array.
            </summary>
            <param name="a">Pipetting parameter array</param>
            <param name="b">Additional volume</param>
            <returns>a new pipetting parameter array with an decreased volume</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingPar.op_Multiply(Sias.PipArm.SPipettingPar,System.Double)">
            <summary>
            Multiply the volume of pipetting parameter array.
            </summary>
            <param name="a">Pipetting parameter array</param>
            <param name="b">Volume factor</param>
            <returns>a new pipetting parameter array with the multiplied volumes</returns>
        </member>
        <member name="P:Sias.PipArm.SPipettingPar.PipPar">
            <summary>pipetting parameter array property</summary>
        </member>
        <member name="P:Sias.PipArm.SPipettingPar.ZMode">
            <summary>
            Z positioning mode property
            
            
            </summary>
            <details>
            The following Z positioning modes are supported:
             - DefaultPosition (0):	\n	
                ZOffset is relative to operations default height
                  <code> Z = DefaultPos + PipPar.ZOffset[Tip]; </code>
                The default position depends on the type of operation the SPipettingPar
                class is used for.
             - RelativeToTravelHeight(1):	\n
                ZOffset is relative to the cavities travel height
                  <code> Z = Cavity.TravelHeight + PipPar.ZOffset[Tip]; </code>
                This may be a typical reference position for air gaps, as the
                travel height is surely out of the liquid (if correctly defined).
             - RelativeToScanHeight(2):	\n
                ZOffset is relative to the cavities scan height
                  <code> Z = Cavity.ScanHeight + PipPar.ZOffset[Tip]; </code>
                Typically the scan height is above the allowed liquid surface (otherwise
                liquid detection would not work). So using values above scan height should
                always be in air while below may be in liquid.
             - RelativeToDispenseHeight(3):	\n
                ZOffset is relative to the cavities dispense height
                  <code> Z = Cavity.DispenseHeight + PipPar.ZOffset[Tip]; </code>
             - RelativeToMaxHeight(4):	\n
                ZOffset is relative to the cavities max. height (cavity bottom).
                  <code> Z = Cavity.MaxHeight + PipPar.ZOffset[Tip]; </code>
                Typically this option should be used with positive Z offsets
                to make sure the position is above cavity bottom.
             - RelativeToLiquidPosition(5):	\n
                ZOffset is relative to the cavities liquid height.
                  <code> Z = Cavity.HeightForVolume(Cavity.Liquid.Volume) + PipPar.ZOffset[Tip]; </code>
                <b>Note:</b> This is only a good option if the known liquid in the  
                cavity is defined correctly!
             .
            </details>
        </member>
        <member name="P:Sias.PipArm.SPipettingPar.ZModeValue">
            <summary>Z positioning mode value property</summary>
        </member>
        <member name="P:Sias.PipArm.SPipettingPar.ZOffset">
            <summary>
            Z position offset array property
            
            This array is used to keep the relative Z position offsets for 
            aspirate or dispense. The values are relative to the position 
            defined by the ZMode property.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SPipettingPar.Options">
            <summary>
            Pipetting options property
            
            This property is used to store the pipetting options to xml. 
            </summary>
        </member>
        <member name="P:Sias.PipArm.SPipettingPar.ForceParallelPipetting">
            <summary>
            Force parallel pipetting flag property
            
            This flag is only recognized on multiplexed pump systems to force parallel 
            pipetting even when the pumps channels are in same group (using the same motor).
            </summary>
        </member>
        <member name="P:Sias.PipArm.SPipettingPar.Delay">
            <summary>Pipetting delay [ms] property</summary>
        </member>
        <member name="P:Sias.PipArm.SPipettingPar.VolArr">
            <summary>
            Get a volume array from the pipetting parameter array
            
            <b>Important:</b>\n
                It is not usefull/allowed to write to this array. To change the 
                acceleration please use PipPar[Tip].Volume.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SPipettingPar.SpeedArr">
            <summary>
            Get a speed array from the pipetting parameter array
            
            <b>Important:</b>\n
                It is not usefull/allowed to write to this array. To change the 
                acceleration please use PipPar[Tip].Speed.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SPipettingPar.AccelArr">
            <summary>
            Get an acceleration array from the pipetting parameter array (read only)
            
            <b>Important:</b>\n
                It is not usefull/allowed to write to this array. To change the 
                acceleration please use PipPar[Tip].Accel.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SPipettingPar.Length">
            <summary>
            Get the number of elements in the pipetting parameter array (read only)
            </summary>
        </member>
        <member name="P:Sias.PipArm.SPipettingPar.AbsoluteTips">
            <summary>
            Return the tips needed to move to an absolute position (read only)
            </summary>
        </member>
        <member name="P:Sias.PipArm.SPipettingPar.RelativeTips">
            <summary>
            Return the tips needed to move relative (read only)
            </summary>
        </member>
        <member name="P:Sias.PipArm.SPipettingPar.TrackingTips">
            <summary>
            Return the tips used with tracking per default.
            
            In general tracking is used in case you are working in relation 
            to the liquid surface. As the Z mode is the same for the whole 
            pipetting parameter class this method either returns all tips 
            or no tip.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SPipettingPar.Item(System.Int32)">
            <summary>
            Get pipetting parameters for the defined tip.
            </summary>
            <param name="Tip">tip index</param>
            <returns>pipetting parameters</returns>
        </member>
        <member name="T:Sias.PipArm.SPipettingPar.ModeConst">
            <summary>Z move mode constants</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingPar.ModeConst.DefaultPosition">
            <summary>Move to default Z position (method depending)</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingPar.ModeConst.RelativeToTravelHeight">
            <summary>Move Z relative to cavities travel height</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingPar.ModeConst.RelativeToScanHeight">
            <summary>Move Z relative to cavities scan start height</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingPar.ModeConst.RelativeToDispenseHeight">
            <summary>Move Z relative to cavities dispense height</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingPar.ModeConst.RelativeToMaxHeight">
            <summary>Move Z relative to cavities maximum height (typically the cavity bottom)</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingPar.ModeConst.RelativeToLiquidPosition">
            <summary>Move Z relative to surface of the cavities known liquid</summary>
        </member>
        <member name="T:Sias.PipArm.SPipettingPar.OptionsMask">
            <summary>
            Detection mode mask enumerator
            
            This enumerator can be used as readable parameters for the SDetectionPar constructor.
            However, mostly it will be more readable to define the detection parameters by assigning 
            the SDetectionPar properties explicit.
            </summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingPar.OptionsMask.ForceParallelPipetting">
            <summary>Force Parallel pipetting bit mask</summary>
        </member>
        <member name="T:Sias.PipArm.SMixPar">
            <summary>
            Mixing parameters class.
            </summary>
        </member>
        <member name="F:Sias.PipArm.SMixPar._Cycles">
            <summary>No of mixing cycles field</summary>
        </member>
        <member name="F:Sias.PipArm.SMixPar._MixMode">
            <summary>Mixing mode (actually unused) field</summary>
        </member>
        <member name="F:Sias.PipArm.SMixPar._AspPar">
            <summary>Aspiration pipetting parameter field</summary>
        </member>
        <member name="F:Sias.PipArm.SMixPar._DspPar">
            <summary>Dispense pipetting parameter field</summary>
        </member>
        <member name="M:Sias.PipArm.SMixPar.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Sias.PipArm.SMixPar.#ctor(Sias.PipArm.SMixPar)">
            <summary>Copy constructor</summary>
            <param name="m">Origin mixing parameters</param>
        </member>
        <member name="M:Sias.PipArm.SMixPar.#ctor(System.Int32,System.Int32,Sias.PipArm.SPipettingPar,Sias.PipArm.SPipettingPar)">
            <summary>
            Data construction constructor.
            </summary>
            <param name="cycles">No of mixing cycles</param>
            <param name="mixMode">Type of mixing</param>
            <param name="aspPar">Pipetting parameters aspiration</param>
            <param name="dspPar">Pipetting parameters dispense</param>
        </member>
        <member name="P:Sias.PipArm.SMixPar.Cycles">
            <summary>No of mixing cycles property</summary>
        </member>
        <member name="P:Sias.PipArm.SMixPar.MixMode">
            <summary>Mixing mode (actually unused) property</summary>
        </member>
        <member name="P:Sias.PipArm.SMixPar.AspPar">
            <summary>Aspiration pipetting parameter property</summary>
        </member>
        <member name="P:Sias.PipArm.SMixPar.DspPar">
            <summary>Dispense pipetting parameter property</summary>
        </member>
        <member name="T:Sias.PipArm.SGetTipsPar">
            <summary>
            Get tips parameter class.
            
            This class is used as parameter for the PipArm.GetTips method.
            It defines the parameters (error handling, move modes, move speeds, ...) 
            for picking up disposable tips.
            </summary>
        </member>
        <member name="F:Sias.PipArm.SGetTipsPar._Mode">
            <summary>Get tips mode field</summary>
        </member>
        <member name="F:Sias.PipArm.SGetTipsPar._RetractSpeed">
            <summary>Retract speed (the speed used for moving up after the block move) field</summary>
        </member>
        <member name="F:Sias.PipArm.SGetTipsPar._RetractRamp">
            <summary>Retract ramp (The ramp used for moving up after the block move) field</summary>
        </member>
        <member name="M:Sias.PipArm.SGetTipsPar.#ctor(System.Int32,System.Byte,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create get tips parameter class.
            </summary>
            <param name="Mode">Get tips mode (options)</param>
            <param name="PickMode">Pick move mode: 0=normal move, 1..3 = Block move 1..3</param>
            <param name="PickSpeed">Pick move speed</param>
            <param name="PickRamp">Pick move ramp</param>
            <param name="retractSpeed">retract speed</param>
            <param name="retractRamp">retract ramp</param>
        </member>
        <member name="M:Sias.PipArm.SGetTipsPar.#ctor(System.Int32,System.Byte,System.Double,System.Double)">
            <summary>
            Create get tips parameter class.
            </summary>
            <param name="Mode">Get tips mode (options)</param>
            <param name="PickMode">Pick move mode: 0=normal move, 1..3 = Block move 1..3</param>
            <param name="PickSpeed">Pick move speed</param>
            <param name="PickRamp">Pick move ramp</param>
        </member>
        <member name="M:Sias.PipArm.SGetTipsPar.#ctor">
            <summary>
            Create get tips parameter class.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SGetTipsPar.ModeValue">
            <summary>Get tips mode property (for XML storage)</summary>
        </member>
        <member name="P:Sias.PipArm.SGetTipsPar.GetTipsMode">
            <summary>Get tips mode property (for property grid)</summary>
        </member>
        <member name="P:Sias.PipArm.SGetTipsPar.TipCheckBeforePick">
            <summary>Check tips before pick</summary>
        </member>
        <member name="P:Sias.PipArm.SGetTipsPar.DisplayHasTipsError">
            <summary>Display has tips error</summary>
        </member>
        <member name="P:Sias.PipArm.SGetTipsPar.HasTipsAutoDrop">
            <summary>
            This option activates an automatic drop in case of the system 
            finds an available tip before getting tips
            </summary>
        </member>
        <member name="P:Sias.PipArm.SGetTipsPar.HasTipsAutoIgnore">
            <summary>
            This option activates an automatic ignore, if the system 
            finds an available tip before getting tips
            </summary>
        </member>
        <member name="P:Sias.PipArm.SGetTipsPar.DisplayBadTipsError">
            <summary>This option forces calling the error handler, if a bad tip is found.</summary>
        </member>
        <member name="P:Sias.PipArm.SGetTipsPar.BadTipsAutoRetry">
            <summary>This option activates an automatic retry, if a bad tip is found.</summary>
        </member>
        <member name="P:Sias.PipArm.SGetTipsPar.BadTipsAutoIgnore">
            <summary>This option activates an automatic ignore, if a bad tip is found.</summary>
        </member>
        <member name="P:Sias.PipArm.SGetTipsPar.DisplayNoTipsError">
            <summary>This option forces calling the error handler, if no tip is found.</summary>
        </member>
        <member name="P:Sias.PipArm.SGetTipsPar.NoTipsAutoRetry">
            <summary>This option activates an automatic retry, if no tip is found.</summary>
        </member>
        <member name="P:Sias.PipArm.SGetTipsPar.NoTipsAutoIgnore">
            <summary>This option activates an automatic ignore, if no tip is found.</summary>
        </member>
        <member name="P:Sias.PipArm.SGetTipsPar.TipCheckAfterPick">
            <summary>Check tips after pick flag</summary>
        </member>
        <member name="P:Sias.PipArm.SGetTipsPar.DisplayCheckTipsError">
            <summary>Display check tips error flag</summary>
        </member>
        <member name="P:Sias.PipArm.SGetTipsPar.CheckTipsAutoRetry">
            <summary>Auto retry at check tips error flag</summary>
        </member>
        <member name="P:Sias.PipArm.SGetTipsPar.CheckTipsAutoIgnore">
            <summary>Auto ignore at check tips error flag</summary>
        </member>
        <member name="P:Sias.PipArm.SGetTipsPar.ActivateTipRackHolding">
            <summary>Activate tip rack holding mode mask</summary>
            <value></value>
        </member>
        <member name="P:Sias.PipArm.SGetTipsPar.PickMoveMode">
            <summary>
            Tip pick mode property (0..3).
            
            This property defines the move mode for the get tip block move:
             - 0: using normal move  (full power)
             - 1: using block move 1 (full power, reduced block recognition time)
             - 2: using block move 2 (medium power, reduced block recognition time)
             - 3: using block move 3 (low power, reduced block recognition time)
             .
            <b>Take care:</b> The power values are defined by firmware parameters and may 
            differ between different robots.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SGetTipsPar.PickMoveSpeed">
            <summary>
            Tip pick move speed: The speed used for picking up the tips.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SGetTipsPar.PickMoveRamp">
            <summary>
            Tip pick move ramp: The ramp used for the pick up move.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SGetTipsPar.RetractSpeed">
            <summary>Retract speed (the speed used for moving up after the block move) property</summary>
        </member>
        <member name="P:Sias.PipArm.SGetTipsPar.RetractRamp">
            <summary>Retract ramp (The ramp used for moving up after the block move) property</summary>
        </member>
        <member name="T:Sias.PipArm.SGetTipsPar.ModeMask">
            <summary>Get tips mode enumerator</summary>
        </member>
        <member name="F:Sias.PipArm.SGetTipsPar.ModeMask.TipCheckBeforePick">
            <summary>Activate tip check before picking tips</summary>
        </member>
        <member name="F:Sias.PipArm.SGetTipsPar.ModeMask.DisplayHasTipsError">
            <summary>Display error</summary>
        </member>
        <member name="F:Sias.PipArm.SGetTipsPar.ModeMask.HasTipsAutoDrop">
            <summary>auto drop at has tips error (else auto skip)</summary>
        </member>
        <member name="F:Sias.PipArm.SGetTipsPar.ModeMask.HasTipsAutoIgnore">
            <summary>auto ignore at has tips error (else auto skip)</summary>
        </member>
        <member name="F:Sias.PipArm.SGetTipsPar.ModeMask.DisplayNoTipsError">
            <summary>Display error</summary>
        </member>
        <member name="F:Sias.PipArm.SGetTipsPar.ModeMask.NoTipsAutoRetry">
            <summary>auto retry at other position (else auto skip)</summary>
        </member>
        <member name="F:Sias.PipArm.SGetTipsPar.ModeMask.NoTipsAutoIgnore">
            <summary>auto ignore no tips error (else auto skip)</summary>
        </member>
        <member name="F:Sias.PipArm.SGetTipsPar.ModeMask.DisplayBadTipsError">
            <summary>Display error</summary>
        </member>
        <member name="F:Sias.PipArm.SGetTipsPar.ModeMask.BadTipsAutoRetry">
            <summary>auto retry at other position (else auto skip)</summary>
        </member>
        <member name="F:Sias.PipArm.SGetTipsPar.ModeMask.BadTipsAutoIgnore">
            <summary>auto ignore bad tips error (else auto skip)</summary>
        </member>
        <member name="F:Sias.PipArm.SGetTipsPar.ModeMask.TipCheckAfterPick">
            <summary>activate tip check before picking tips</summary>
        </member>
        <member name="F:Sias.PipArm.SGetTipsPar.ModeMask.DisplayCheckTipsError">
            <summary>Display error</summary>
        </member>
        <member name="F:Sias.PipArm.SGetTipsPar.ModeMask.CheckTipsAutoRetry">
            <summary>auto retry at check tips error (else auto skip)</summary>
        </member>
        <member name="F:Sias.PipArm.SGetTipsPar.ModeMask.CheckTipsAutoIgnore">
            <summary>auto ignore at check tips error (else auto skip)</summary>
        </member>
        <member name="F:Sias.PipArm.SGetTipsPar.ModeMask.ActivateTipRackHolding">
            <summary>Activate tip rack holding mode mask</summary>
        </member>
        <member name="T:Sias.PipArm.SDropTipsPar">
             <summary>
             Drop tips parameter.
            
             This class is used as parameter for the	SPipArm.DropTips method.
             It defines the parameters (error handling, move modes, move speeds, ...) 
             for dropping disposable tips.
             </summary>
             <remarks></remarks>
             <example></example>
        </member>
        <member name="F:Sias.PipArm.SDropTipsPar._Mode">
            <summary>Drop mode field</summary>
        </member>
        <member name="M:Sias.PipArm.SDropTipsPar.#ctor(System.Int32,System.Byte,System.Double,System.Double)">
            <summary>
            Data constructor with drop move mode.
            </summary>
            <param name="dropMode">Drop mode</param>
            <param name="dropMoveMode">Drop block move mode (drop move power)</param>
            <param name="dropSpeed">Drop move speed</param>
            <param name="dropRamp">Drop move ramp</param>
        </member>
        <member name="M:Sias.PipArm.SDropTipsPar.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Data constructor without drop move mode.
            </summary>
            <param name="dropMode">Drop mode</param>
            <param name="dropSpeed">Drop move speed</param>
            <param name="dropRamp">Drop move ramp</param>
        </member>
        <member name="M:Sias.PipArm.SDropTipsPar.#ctor">
            <summary>
            Default constructor.
            
             - Drop mode       = no tip checks, display drop errors
             - Drop move mode  = normal move (Full power)
             - Drop move speed = default speed of the motor
             - Drop move ramp  = default ramp of the motor
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDropTipsPar.ModeValue">
            <summary>Drop mode property (for XML storage)</summary>
        </member>
        <member name="P:Sias.PipArm.SDropTipsPar.DropTipsMode">
            <summary>Drop mode property (for property grid)</summary>
        </member>
        <member name="P:Sias.PipArm.SDropTipsPar.TipCheckBeforeDrop">
            <summary>Check tips before pick</summary>
        </member>
        <member name="P:Sias.PipArm.SDropTipsPar.DisplayLostTipsError">
            <summary>Display lost tips error</summary>
        </member>
        <member name="P:Sias.PipArm.SDropTipsPar.LostTipsAutoIgnore">
            <summary>Auto ignore at lost tips error</summary>
        </member>
        <member name="P:Sias.PipArm.SDropTipsPar.DisplayDropTipsError">
            <summary>Display drop tips error</summary>
        </member>
        <member name="P:Sias.PipArm.SDropTipsPar.DropTipsAutoRetry">
            <summary>Auto retry at drop tips error</summary>
        </member>
        <member name="P:Sias.PipArm.SDropTipsPar.DropTipsAutoIgnore">
            <summary>Auto ignore at drop tips error</summary>
        </member>
        <member name="P:Sias.PipArm.SDropTipsPar.MoveToSaveHeightsAfterDrop">
            <summary>
            Move To save feight after drop
            
            This flag will take care to move the tip adapters up as if the tips 
            would not have been removed. This avoid a crash in case the tips are 
            slipped through the drop station (usually a teaching problem).
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDropTipsPar.TipCheckAfterDrop">
            <summary>Check tips after drop</summary>
        </member>
        <member name="P:Sias.PipArm.SDropTipsPar.DisplayHasTipsError">
            <summary>Display remaining tips error</summary>
        </member>
        <member name="P:Sias.PipArm.SDropTipsPar.HasTipsAutoRetry">
            <summary>Auto retry at remaining tips error</summary>
        </member>
        <member name="P:Sias.PipArm.SDropTipsPar.HasTipsAutoIgnore">
            <summary>Auto ignore at remaining tips error</summary>
        </member>
        <member name="P:Sias.PipArm.SDropTipsPar.DropMoveMode">
            <summary>
            Drop tip move mode property (0..3).
            
            This property defines the block move mode for the drop move:
             - 0: using normal move  (full power)
             - 1: using block move 1 (full power, reduced block recognition time)
             - 2: using block move 2 (medium power, reduced block recognition time)
             - 3: using block move 3 (low power, reduced block recognition time)
             .
            <b>Take care:</b> The power values are defined by firmware parameters and may 
            differ between different robots.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDropTipsPar.DropMoveSpeed">
            <summary>
            Drop move speed [mm/s]: The speed used for the drop move.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SDropTipsPar.DropMoveRamp">
            <summary>
            Drop move ramp [mm/s²]: The ramp used for the drop move.
            </summary>
        </member>
        <member name="T:Sias.PipArm.SDropTipsPar.ModeMask">
            <summary>Drop mode mask enumerator</summary>
        </member>
        <member name="F:Sias.PipArm.SDropTipsPar.ModeMask.TipCheckBeforeDrop">
            <summary>Activate tip check before drop</summary>
        </member>
        <member name="F:Sias.PipArm.SDropTipsPar.ModeMask.DisplayLostTipsError">
            <summary>Display tips lost error</summary>
        </member>
        <member name="F:Sias.PipArm.SDropTipsPar.ModeMask.LostTipsAutoIgnore">
            <summary>auto ignore at check tips error (else auto skip)</summary>
        </member>
        <member name="F:Sias.PipArm.SDropTipsPar.ModeMask.DisplayDropTipsError">
            <summary>Display error</summary>
        </member>
        <member name="F:Sias.PipArm.SDropTipsPar.ModeMask.DropTipsAutoRetry">
            <summary>auto retry on drop tips error (else auto skip)</summary>
        </member>
        <member name="F:Sias.PipArm.SDropTipsPar.ModeMask.DropTipsAutoIgnore">
            <summary>auto ignore on drop tips error (very dangerous)</summary>
        </member>
        <member name="F:Sias.PipArm.SDropTipsPar.ModeMask.MoveToSaveHeightsAfterDrop">
            <summary>
            Move To save height after drop
            
            This flag will take care to move the tip adapters up as if the tips 
            would not have been removed. This avoid a crash in case the tips are 
            slipped through the drop station (usually a teaching problem).
            </summary>
        </member>
        <member name="F:Sias.PipArm.SDropTipsPar.ModeMask.TipCheckAfterDrop">
            <summary></summary>
        </member>
        <member name="F:Sias.PipArm.SDropTipsPar.ModeMask.DisplayHasTipsError">
            <summary></summary>
        </member>
        <member name="F:Sias.PipArm.SDropTipsPar.ModeMask.HasTipsAutoRetry">
            <summary></summary>
        </member>
        <member name="F:Sias.PipArm.SDropTipsPar.ModeMask.HasTipsAutoIgnore">
            <summary></summary>
        </member>
        <member name="T:Sias.PipArm.STipMap">
            <summary>
            Tip map class (tip collection).
            
            The tip map class defines a collection of tips. It is based on an integer value where 
            each bit represents one tip.
            </summary>
        </member>
        <member name="M:Sias.PipArm.STipMap.#ctor">
            <summary>
            Default constructor: empty tip map (no tip).
            </summary>
        </member>
        <member name="M:Sias.PipArm.STipMap.#ctor(System.Int32)">
            <summary>
            Create tip map by integer value.
            </summary>
            <param name="STipMap">tip map integer (each bit represents a tip)</param>
        </member>
        <member name="M:Sias.PipArm.STipMap.#ctor(System.Int32,System.Int32)">
            <summary>
            Create tip map by giving first and last tip.
            </summary>
            <param name="FirstTip">First used tip</param>
            <param name="LastTip">Last used tip</param>
        </member>
        <member name="M:Sias.PipArm.STipMap.op_Addition(Sias.PipArm.STipMap,Sias.PipArm.STipMap)">
            <summary>
            Add two tip maps.
            </summary>
            <param name="a">First tip map</param>
            <param name="b">Second tip map</param>
            <returns>New tip map including all tips of tip map <paramref name="a"/> and tip map <paramref name="b"/></returns>
        </member>
        <member name="M:Sias.PipArm.STipMap.op_Addition(Sias.PipArm.STipMap,System.Int32)">
            <summary>
            Add a single tip to a tip map.
            </summary>
            <param name="a">Tip map</param>
            <param name="b">Single tip index</param>
            <returns>New tip map including all tips of tip map <paramref name="a"/> and the single tip <paramref name="b"/></returns>
        </member>
        <member name="M:Sias.PipArm.STipMap.op_Subtraction(Sias.PipArm.STipMap,Sias.PipArm.STipMap)">
            <summary>
            Subtract one tip map from another.
            </summary>
            <param name="a">Tip map to subtract from</param>
            <param name="b">Tip map to subtract</param>
            <returns>New tip map including all tips of tip map a expect the ones of tip map b</returns>
        </member>
        <member name="M:Sias.PipArm.STipMap.op_Subtraction(Sias.PipArm.STipMap,System.Int32)">
            <summary>
            Subtract a single tip from a tip map.
            </summary>
            <param name="a">Tip map to subtract from</param>
            <param name="b">Single tip index to subtract</param>
            <returns>New tip map including all tips of tip map a expect the single tip b</returns>
        </member>
        <member name="M:Sias.PipArm.STipMap.op_OnesComplement(Sias.PipArm.STipMap)">
            <summary>
            Invert a tip map.
            
            Inverting a tip map means all used tips will be reset while all unused tips will be set.
            Take care as the tip map does not know how many tips are available, inverting a tip map may 
            result in a tip map including tips not available at the concerned arm.
            </summary>
            <param name="a">Tip map to invert</param>
            <returns>Inverted tip map</returns>
        </member>
        <member name="M:Sias.PipArm.STipMap.ToString">
            <summary>
            Retrieve string that indicates the current object.
            </summary>
            <returns>The string format of the object.</returns>
        </member>
        <member name="M:Sias.PipArm.STipMap.UsedYZDevices(Sias.PipArm.SPipYZDeviceCollection)">
            <summary>
            This method returns all used Y/Z devices of a given Y/Z device array.
            </summary>
            <param name="AllDev">List of all Y/Z devices</param>
            <returns>List of used Y/Z devices</returns>
        </member>
        <member name="M:Sias.PipArm.STipMap.TipUsed(System.Int32)">
            <summary>
            Return tip used flag for a given tip index.
            </summary>
            <param name="TipInx">Tip index</param>
            <returns>true if tip is used, false if not</returns>
        </member>
        <member name="M:Sias.PipArm.STipMap.SingleTip(System.Int32)">
            <summary>
            Return the tip map of the given single tip of 0 if the tip is not used.
            </summary>
            <param name="TipInx">Tip index</param>
            <returns>true if tip is used, false if not</returns>
        </member>
        <member name="M:Sias.PipArm.STipMap.MaxTip(System.Object[])">
            <summary>
            Highest used tip in tip map
            
            Calculate highest used tip depending on the size of the given array 
            and on the used tip map.
            </summary>
            <param name="Arr">Array to check</param>
            <returns>highest used tip</returns>
        </member>
        <member name="M:Sias.PipArm.STipMap.MaxTip(System.Collections.IList)">
            <summary>
            Highest used tip in tip map
            
            Calculate highest used tip depending on the size of the given array 
            and on the used tip map.
            </summary>
            <param name="Arr">List to check</param>
            <returns>highest used tip</returns>
        </member>
        <member name="M:Sias.PipArm.STipMap.TipsOfCavities(Sias.Core.Interfaces.SCavityCollection)">
            <summary>
            Calculate the tip usage for a given cavity collection.
            
            This method calculates for each cavity in a cavity collection which tips are used.
            If a cavity is used for more then one tip, then all corresponding tip maps will keep 
            all tips used for the concerned cavity.
            </summary>
            <param name="Cavities">Cavities collection to check</param>
            <returns>Tip map array with used tips</returns>
        </member>
        <member name="M:Sias.PipArm.STipMap.MiddleTip(System.Int32)">
            <summary>
            Return the tips most near to the middle of all tips.
            
            Of course this depends on the no of tips and the used tips.
            Here is a list of tip priorities depending on the tip count:
             - 10/11 Tips: 5,4,6,3,7,2,8,1,9,0,(10)
             -  8/ 9 Tips: 4,3,5,2,6,1,7,0,(8)
             -  6/ 7 Tips: 3,2,4,1,5,0,(6)
             -  4/ 5 Tips: 2,1,3,0,(4)
             -  2/ 3 Tips: 1,0,(2)
             -     1 Tip:  0
            </summary>
            <param name="TipCount"></param>
            <returns></returns>
        </member>
        <member name="M:Sias.PipArm.STipMap.Combine(Sias.PipArm.STipMap)">
            <summary>
            Combine tip map with another tip map.
            
            This method returns a tip map of all tips used in origin tip map and 
            in <paramref name="Tips"/>.
            </summary>
            <param name="Tips">The tip map used as filter</param>
            <returns>A tip map of tips used in both tip maps</returns>
        </member>
        <member name="P:Sias.PipArm.STipMap.AnyTipUsed">
            <summary>
            Return true if any tip is used.
            </summary>
        </member>
        <member name="P:Sias.PipArm.STipMap.TipMap">
            <summary>
            Return the tip map number corresponding with the STipMap (tip collection).
            
            Each bit in the tip map number is representing one tip.
            </summary>
        </member>
        <member name="P:Sias.PipArm.STipMap.EvenTips">
            <summary>The even tips of the tip map e.g. [2,4,6,8] property</summary>
        </member>
        <member name="P:Sias.PipArm.STipMap.OddTips">
            <summary>The odd tips of the tip map e.g. [1,3,5,7] property</summary>
        </member>
        <member name="P:Sias.PipArm.STipMap.Tips">
            <summary>
            Return a string representation of the tip map.
            
            Each bit in the tip map number is representing one tip.
            </summary>
        </member>
        <member name="P:Sias.PipArm.STipMap.NoOfUsedTips">
            <summary>
            Calculate the number of used tips.
            </summary>
        </member>
        <member name="P:Sias.PipArm.STipMap.FirstUnused">
            <summary>
            Calculate the first unused tip.
            </summary>
        </member>
        <member name="P:Sias.PipArm.STipMap.TypeInfo">
            <summary>
            Calculate a string representing the used tips.
            </summary>
        </member>
        <member name="P:Sias.PipArm.STipMap.Item(System.Int32)">
            <summary>
            Single tip indexer.
            
            This indexer returns true for all tip indexes in available in the tip collection.
            </summary>
            <param name="Tip">index of the tip</param>
            <returns>True if the tip is in the tip map (tip collection)</returns>
        </member>
        <member name="T:Sias.PipArm.STipMapConverter">
            <summary>
            SPosition converter.
            </summary>
        </member>
        <member name="M:Sias.PipArm.STipMapConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="sourceType">A Type that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Sias.PipArm.STipMapConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the 
            specified context and culture information.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The Object to convert.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:Sias.PipArm.STipMapConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to. </param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="T:Sias.PipArm.SBasePipettingTemplate">
            <summary>
            Base \ref PipettingTemplates "pipetting template"
            
            This class is the base class for the all pipetting template classes.
            A pipetting template allows to define a way how a pipetting step has 
            to be done. Pipetting templates can be executed using the 
            \n2link{Sias::PipArm,SPipettingMethods,ExecuteTemplate} method.\n
            </summary>
            <details>
            To define the sequence of a pipetting step a pipetting template implements 
            up to six different methods:
             - \clink{Sias::PipArm::SBasePipettingTemplate,Startup}
             - \clink{Sias::PipArm::SBasePipettingTemplate,PrePipetting}
             - \clink{Sias::PipArm::SBasePipettingTemplate,MoveToPipettingXY}
             - \clink{Sias::PipArm::SBasePipettingTemplate,Pipetting}
             - \clink{Sias::PipArm::SBasePipettingTemplate,PostPipetting}
             - \clink{Sias::PipArm::SBasePipettingTemplate,Cleanup}
             .
            Typically not all of above methods need to be implemented.
            
            The most important template derivations are 
             - \nlink{Sias::PipArm,SAspirateTemplate}
             - \nlink{Sias::PipArm,SDispenseTemplate}
             .
            </details>
        </member>
        <member name="F:Sias.PipArm.SBasePipettingTemplate._PipettingMethods">
            <summary>Used pipetting methods field</summary>
        </member>
        <member name="F:Sias.PipArm.SBasePipettingTemplate._IsVol">
            <summary>Actual (known) volume in the cavities field</summary>
        </member>
        <member name="M:Sias.PipArm.SBasePipettingTemplate.#ctor">
            <summary>
            Initializes a new instance of the <b>SBasePipettingTemplate</b> class.
            </summary>
        </member>
        <member name="M:Sias.PipArm.SBasePipettingTemplate.Startup(Sias.PipArm.SPipettingMethods,Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection)">
            <summary>
            Template startup method for template initialization and preparation.
            
            This is the first method called. It is designed to prepare necessary internal 
            variables and fields. In general this method is not thought to execute any movements
            on the robot.
            </summary>
            <details>
            Execution conditions:
             - The pipetting arm is at an undefined position
             - The cavities are not requested for pipetting access
             .
            </details>
            <param name="Methods">The pipetting method class used for this principle</param>
            <param name="Tips">The used \ref Used_Tips "tips"</param>
            <param name="Cavities">Used cavities (one for each available tip)</param>
        </member>
        <member name="M:Sias.PipArm.SBasePipettingTemplate.PrePipetting(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection)">
            <summary>
            Pre pipetting method for cavity position independent pipetting activities. 
            
            This method is called after pipetting access is successfully requested. 
            As no X/Y movement is done yet the X/Y of the pipetting arm is undefined.
            In general the tips should be out of any liquid.
            Conditions:
             - The pipetting arm is at an undefined x/y position
             - The cavities are successfully requested for pipetting access
             .
            </summary>
            <param name="Tips">The used \ref Used_Tips "tips"</param>
            <param name="Cavities">Used cavities (one for each available tip)</param>
        </member>
        <member name="M:Sias.PipArm.SBasePipettingTemplate.MoveToPipettingXY(Sias.PipArm.STipMap,System.Double,System.Double,System.Double[],System.Double[])">
            <summary>
            Move to pipetting X/Y position for moving above the cavities.
            
            This method is called to move to the pipetting position (X and Y). This method is only needed 
            to override if you have special needs for the x/y position of the cavity.
            Conditions:
             - The cavities are requested for pipetting access
             - The pipetting arm has to move above the defined cavities
             .
            </summary>
            <param name="Tips">The used \ref Used_Tips "tips"</param>
            <param name="XMin">Minimum of allowed X range</param>
            <param name="XMax">Maximum of allowed X Range</param>
            <param name="YMin">Minimums of the allowed Y Ranges</param>
            <param name="YMax">Maximums of the allowed Y Ranges</param>
        </member>
        <member name="M:Sias.PipArm.SBasePipettingTemplate.Pipetting(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection)">
            <summary>
            Pipetting method for the cavity position depending pipetting activities.
            
            This method is called when the tips are above the defined cavities. This method 
            will be called for each pipetting step.
            Conditions:
             - The cavities are requested for pipetting access
             - The pipetting arm is above the defined cavities
             .
            </summary>
            <param name="Tips">The used \ref Used_Tips "tips"</param>
            <param name="Cavities">Used cavities (one for each available tip)</param>
        </member>
        <member name="M:Sias.PipArm.SBasePipettingTemplate.PostPipetting(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection)">
            <summary>
            Post pipetting method for cavity independent post pipetting activities.
            
            This method is called after the last pipetting step, but before the cavity 
            access is released.
            Conditions:
             - The cavities are requested for pipetting access.
             - The pipetting arm is above the cavities of the last pipetting step.
             .
            </summary>
            <param name="Tips">The used \ref Used_Tips "tips"</param>
            <param name="Cavities">Used cavities (one for each available tip)</param>
        </member>
        <member name="M:Sias.PipArm.SBasePipettingTemplate.Cleanup(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection)">
            <summary>
            Cleanup method for cleaning up the template
            
            This method is called after the cavity access is released. In difference
            to the Pipetting and PostPipetting methods it is also called if the 
            pipetting access request failed.
            Conditions:
             - The cavities are not requested for pipetting access any more.
             - The pipetting arm is above the cavities of the last pipetting step.
             .
            </summary>
            <param name="Tips">The used \ref Used_Tips "tips"</param>
            <param name="Cavities">Used cavities (one for each available tip)</param>
        </member>
        <member name="P:Sias.PipArm.SBasePipettingTemplate.PipettingMethods">
            <summary>Used pipetting methods property</summary>
        </member>
        <member name="P:Sias.PipArm.SBasePipettingTemplate.IsVol">
            <summary>Actual (known) volume in the cavities property</summary>
        </member>
        <member name="P:Sias.PipArm.SBasePipettingTemplate.HasError">
            <summary>
            Validates the principle.
            </summary>
            <value>Returns false if the principle is executable otherwise true</value>
        </member>
        <member name="T:Sias.PipArm.SAspirateTemplate">
            <summary>
            This class implements the \ref PipettingTemplates "pipetting template" for the default Aspirate.
            
            It is used to implement the \nlink{Sias::PipArm,SPipettingMethods.Aspirate} method. 
            </summary>
            <details>
            \copydetails SAspirateTemplate::SAspirateTemplate
            
            \b Usage: \code
              PipettingMethods.ExecuteTemplate(UsedTips, Cavities, 
                                new SAspirateTemplate(Air1, Volume, Air2, Spit, MixPar, DetPar));
            \endcode
            </details>
        </member>
        <member name="F:Sias.PipArm.SAspirateTemplate._Air1">
            <summary>First air gap (before liquid aspiration) field</summary>
        </member>
        <member name="F:Sias.PipArm.SAspirateTemplate._Volume">
            <summary>Aspiration volume field</summary>
        </member>
        <member name="F:Sias.PipArm.SAspirateTemplate._Air2">
            <summary>Second air gap (after liquid aspiration) field</summary>
        </member>
        <member name="F:Sias.PipArm.SAspirateTemplate._Spit">
            <summary>Spit back volume field</summary>
        </member>
        <member name="F:Sias.PipArm.SAspirateTemplate._MixPar">
            <summary>Mixing parameter field</summary>
        </member>
        <member name="F:Sias.PipArm.SAspirateTemplate._DetPar">
            <summary>Detection parameters field</summary>
        </member>
        <member name="F:Sias.PipArm.SAspirateTemplate.AVol">
            <summary>real aspiration volume including spit back volume</summary>
        </member>
        <member name="M:Sias.PipArm.SAspirateTemplate.ZScan(Sias.Core.Interfaces.SCavityCollection,System.Double)">
            <summary>Calculate scan height array from cavities</summary>
        </member>
        <member name="M:Sias.PipArm.SAspirateTemplate.#ctor(Sias.PipArm.SPipettingPar,Sias.PipArm.SPipettingPar,Sias.PipArm.SPipettingPar,Sias.PipArm.SPipettingPar,Sias.PipArm.SMixPar,Sias.PipArm.SDetectionPar)">
            <summary>
            Initializes a new instance of the <b>SAspirateTemplate</b> class.
            </summary>
            <param name="Air1">Separation air gap parameters (before taking liquid)</param>
            <param name="Vol">Liquid pipetting parameters</param>
            <param name="Air2">Transportation air gap parameters (before next X/Y move)</param>
            <param name="Spit">Spit back volumes (null for no spit back)</param>
            <param name="MixPar">Mixing parameters (null for no mixing)</param>
            <param name="DetPar">\ref DetectionPar</param>
        </member>
        <member name="M:Sias.PipArm.SAspirateTemplate.PrePipetting(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection)">
            <summary>
            \copybrief   Sias::PipArm::SBasePipettingTemplate::PrePipetting
            
            This method is called before any X/Y movement is done.\n
            In case of Aspirate we will 
             - optionally pick the first air gap (\ref Air1) (if position is not default position).
             .
            </summary>
            <param name="Tips">The used \ref Used_Tips "tips"</param>
            <param name="Cavities">Used cavities (one for each available tip)</param>
        </member>
        <member name="M:Sias.PipArm.SAspirateTemplate.Pipetting(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection)">
            \copybrief   Sias::PipArm::SBasePipettingTemplate::Pipetting
            
            This method is called when the tips are above the defined cavities.\n
            In case of Aspirate it will 
             - optionally take first air gap (\ref Air1) (if position is not default position)
             - Move to the aspiration position (\ref DetPar)
             - optionally execute mixing (\ref MixPar)
             - pick the defined volume (\ref Volume)
             - Retract out of the liquid
             - optionally dispense spit back volume (\ref Spit)
             - optionally pick second air gap (\ref Air2)
             . 
            <param name="Tips">The used \ref Used_Tips "tips"</param>
            <param name="Cavities">Used cavities (one for each available tip)</param>
        </member>
        <member name="M:Sias.PipArm.SAspirateTemplate.PostPipetting(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection)">
            <summary>
            \copybrief   Sias::PipArm::SBasePipettingTemplate::PostPipetting
            
            This method is called after the last pipetting step.\n
            In case of Aspirate it will 
             - remove the (pre)mixing history entries from cavity histories.
             .
            </summary>
            <param name="Tips">The used \ref Used_Tips "tips"</param>
            <param name="Cavities">Used cavities (one for each available tip)</param>
        </member>
        <member name="P:Sias.PipArm.SAspirateTemplate.Air1">
            <summary>First air gap (before liquid aspiration) property</summary>
        </member>
        <member name="P:Sias.PipArm.SAspirateTemplate.Volume">
            <summary>Aspiration volume property</summary>
        </member>
        <member name="P:Sias.PipArm.SAspirateTemplate.Air2">
            <summary>Second air gap (after liquid aspiration) property</summary>
        </member>
        <member name="P:Sias.PipArm.SAspirateTemplate.Spit">
            <summary>Spit back volume property</summary>
        </member>
        <member name="P:Sias.PipArm.SAspirateTemplate.MixPar">
            <summary>Mixing parameter property</summary>
        </member>
        <member name="P:Sias.PipArm.SAspirateTemplate.DetPar">
            <summary>Detection parameters property</summary>
        </member>
        <member name="T:Sias.PipArm.SDispenseTemplate">
            <summary>
            This class implements the \ref PipettingTemplates "pipetting template" for the default Dispense.
            
            It is used to implement the \nlink{Sias::PipArm,SPipettingMethods.Dispense} method. 
            </summary>
            <details>
            \copydetails SDispenseTemplate::SDispenseTemplate
            
            \b Usage: \code
              PipettingMethods.ExecuteTemplate(UsedTips, Cavities, 
                                new SDispenseTemplate(Volume, MixPar, DetPar, Air2));
            \endcode
            </details>
        </member>
        <member name="F:Sias.PipArm.SDispenseTemplate._Volume">
            <summary>Dispense volume field</summary>
        </member>
        <member name="F:Sias.PipArm.SDispenseTemplate._Air2">
            <summary>Second air gap (after liquid aspiration) field</summary>
        </member>
        <member name="F:Sias.PipArm.SDispenseTemplate._MixPar">
            <summary>Mixing parameter field</summary>
        </member>
        <member name="F:Sias.PipArm.SDispenseTemplate._DetPar">
            <summary>Detection parameters field</summary>
        </member>
        <member name="F:Sias.PipArm.SDispenseTemplate.DetVol">
            <summary>Detection volume including</summary>
        </member>
        <member name="M:Sias.PipArm.SDispenseTemplate.ZScan(Sias.Core.Interfaces.SCavityCollection,System.Double)">
            <summary>Calculate scan height array from cavities</summary>
        </member>
        <member name="M:Sias.PipArm.SDispenseTemplate.#ctor(Sias.PipArm.SPipettingPar,Sias.PipArm.SMixPar,Sias.PipArm.SDetectionPar,Sias.PipArm.SPipettingPar)">
            <summary>
            Initializes a new instance of the <b>SAspirateTemplate</b> class.
            </summary>
            <param name="DspVol">Volume to dispense (including transportation air gap)</param>
            <param name="MixPar">Mixing parameters (null for no mixing)</param>
            <param name="DetPar">\ref DetectionPar</param>
            <param name="Air2">Transportation air gap parameters (before next X/Y move)</param>
        </member>
        <member name="M:Sias.PipArm.SDispenseTemplate.Pipetting(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection)">
            \copybrief   Sias::PipArm::SBasePipettingTemplate::Pipetting
            
            This method is called when the tips are above the defined cavities.\n
            In case of Dispense it will 
             - move to the dispense position (\ref DetPar)
             - dispense the defined volume (\ref Volume)
             - optionally execute mixing (\ref MixPar)
             - optionally move out of the liquid
             - optionally pick air gap (\ref Air2)
             . 
            <param name="Tips">The used \ref Used_Tips "tips"</param>
            <param name="Cavities">Used cavities (one for each available tip)</param>
        </member>
        <member name="P:Sias.PipArm.SDispenseTemplate.Volume">
            <summary>Dispense volume (including transportation air gap) property</summary>
        </member>
        <member name="P:Sias.PipArm.SDispenseTemplate.Air2">
            <summary>Second air gap (after liquid aspiration) property</summary>
        </member>
        <member name="P:Sias.PipArm.SDispenseTemplate.MixPar">
            <summary>Mixing parameter property</summary>
        </member>
        <member name="P:Sias.PipArm.SDispenseTemplate.DetPar">
            <summary>Detection parameters property</summary>
        </member>
        <member name="T:Sias.PipArm.SPickedFromHistoryEntry">
            <summary>
            Picked from history entry.
            
            The picked from history entry is used to record when a liquid is picked from a cavity. 
            It is typically stored first at the liquid history of a tip and will be transferred 
            finally to a destination cavity.
            </summary>
        </member>
        <member name="F:Sias.PipArm.SPickedFromHistoryEntry.RemoveEntryType">
            <summary>
            This member defines the history entries which will be removed when transferring 
            a history from a cavity to a tip.
            </summary>
        </member>
        <member name="F:Sias.PipArm.SPickedFromHistoryEntry._TipID">
            <summary>Tip identification of the concerned tip field</summary>
        </member>
        <member name="F:Sias.PipArm.SPickedFromHistoryEntry._Liquid">
            <summary>Concerned liquid field</summary>
        </member>
        <member name="F:Sias.PipArm.SPickedFromHistoryEntry._LiquidHistory">
            <summary>The history of the concerned liquid field</summary>
        </member>
        <member name="F:Sias.PipArm.SPickedFromHistoryEntry._CavityName">
            <summary>Name of concerned cavity field</summary>
        </member>
        <member name="M:Sias.PipArm.SPickedFromHistoryEntry.#ctor">
            <summary>
            Default pick history entry construction.
            
            Creating a history entry with this constructor allows an assignment 
            for the properties until the entry type is assigned and the properties 
            are assigned.
            </summary>
        </member>
        <member name="M:Sias.PipArm.SPickedFromHistoryEntry.#ctor(System.String)">
            <summary>
            History entry XML string construction.
            </summary>
            <param name="Config">XML data string</param>
        </member>
        <member name="M:Sias.PipArm.SPickedFromHistoryEntry.#ctor(System.Int32,Sias.Core.Interfaces.ILiquid,Sias.Core.Interfaces.ICavity)">
            <summary>
            Pick history entry data construction.
            </summary>
            <param name="tipID">Tip identifier (100*ArmIndex + TipIndex) of the concerned tip</param>
            <param name="liquid">Concerned liquid</param>
            <param name="cavity">Concerned cavity</param>
        </member>
        <member name="M:Sias.PipArm.SPickedFromHistoryEntry.ToString">
            <summary>
            Convert to string.
            </summary>
            <returns>A string representation of the history entry</returns>
        </member>
        <member name="M:Sias.PipArm.SPickedFromHistoryEntry.HistoryInfo(System.Int32)">
            <summary>
            Convert the history entry into an information string.
            </summary>
            <returns>History information string</returns>
        </member>
        <member name="M:Sias.PipArm.SPickedFromHistoryEntry.EntryNode">
            <summary>
            Create a TreeView node representation for this history entry.
            </summary>
            <returns>TreeView node representation the entry</returns>
        </member>
        <member name="P:Sias.PipArm.SPickedFromHistoryEntry.TipID">
            <summary>Tip identification of the concerned tip property</summary>
        </member>
        <member name="P:Sias.PipArm.SPickedFromHistoryEntry.Liquid">
            <summary>Concerned liquid property</summary>
        </member>
        <member name="P:Sias.PipArm.SPickedFromHistoryEntry.LiquidHistory">
            <summary>The history of the concerned liquid property</summary>
        </member>
        <member name="P:Sias.PipArm.SPickedFromHistoryEntry.CavityName">
            <summary>Name of concerned cavity property</summary>
        </member>
        <member name="T:Sias.PipArm.SPickedWithAirFromHistoryEntry">
            <summary>
            Picked from History entry.
            
            The picked from History entry is used to record when a liquid is picked from a cavity. 
            It is typically stored first at the liquid history of a tip and will be transferred 
            finally to a destination cavity.
            </summary>
        </member>
        <member name="F:Sias.PipArm.SPickedWithAirFromHistoryEntry._TipID">
            <summary>Tip identification of the concerned tip field</summary>
        </member>
        <member name="F:Sias.PipArm.SPickedWithAirFromHistoryEntry._AirVol">
            <summary>Additional volume part (air) field</summary>
        </member>
        <member name="F:Sias.PipArm.SPickedWithAirFromHistoryEntry._Liquid">
            <summary>Concerned liquid field</summary>
        </member>
        <member name="F:Sias.PipArm.SPickedWithAirFromHistoryEntry._LiquidHistory">
            <summary>The history of the concerned liquid field</summary>
        </member>
        <member name="F:Sias.PipArm.SPickedWithAirFromHistoryEntry._CavityName">
            <summary>Name of concerned cavity field</summary>
        </member>
        <member name="M:Sias.PipArm.SPickedWithAirFromHistoryEntry.#ctor">
            <summary>
            Default pick history entry construction.
            
            Creating a history entry with this constructor allows an assignment 
            for the properties until the entry type is assigned and the properties 
            are assigned.
            </summary>
        </member>
        <member name="M:Sias.PipArm.SPickedWithAirFromHistoryEntry.#ctor(System.String)">
            <summary>
            History entry XML string construction.
            </summary>
            <param name="Config">XML data string</param>
        </member>
        <member name="M:Sias.PipArm.SPickedWithAirFromHistoryEntry.#ctor(System.Int32,Sias.Core.Interfaces.ILiquid,System.Double,Sias.Core.Interfaces.ICavity)">
            <summary>
            Pick history entry data construction.
            </summary>
            <param name="tipID">Tip identifier (100*ArmIndex + TipIndex) of the concerned tip</param>
            <param name="liquid">Concerned liquid</param>
            <param name="airVol">Concerned air gap volume</param>
            <param name="cavity">Concerned cavity</param>
        </member>
        <member name="M:Sias.PipArm.SPickedWithAirFromHistoryEntry.ToString">
            <summary>
            Convert to string.
            </summary>
            <returns>A string representation of the history entry</returns>
        </member>
        <member name="M:Sias.PipArm.SPickedWithAirFromHistoryEntry.HistoryInfo(System.Int32)">
            <summary>
            Convert the history entry into an information string.
            </summary>
            <returns>History information string</returns>
        </member>
        <member name="M:Sias.PipArm.SPickedWithAirFromHistoryEntry.EntryNode">
            <summary>
            Create a TreeView node representation this History Entry.
            </summary>
            <returns>TreeView node representation the Entry</returns>
        </member>
        <member name="P:Sias.PipArm.SPickedWithAirFromHistoryEntry.TipID">
            <summary>Tip identification of the concerned tip property</summary>
        </member>
        <member name="P:Sias.PipArm.SPickedWithAirFromHistoryEntry.AirVol">
            <summary>Additional volume part (air) property</summary>
        </member>
        <member name="P:Sias.PipArm.SPickedWithAirFromHistoryEntry.Liquid">
            <summary>Concerned liquid property</summary>
        </member>
        <member name="P:Sias.PipArm.SPickedWithAirFromHistoryEntry.LiquidHistory">
            <summary>The history of the concerned liquid property</summary>
        </member>
        <member name="P:Sias.PipArm.SPickedWithAirFromHistoryEntry.CavityName">
            <summary>Name of concerned cavity property</summary>
        </member>
        <member name="T:Sias.PipArm.SAddedLiquidHistoryEntry">
            <summary>
            Picked from History entry.
            
            The picked from History entry is used to record when a liquid is picked from a cavity. 
            It is typically stored first at the liquid history of a tip and will be transferred 
            finally to a destination cavity.
            </summary>
        </member>
        <member name="F:Sias.PipArm.SAddedLiquidHistoryEntry._TipID">
            <summary>Tip identification of the concerned tip field</summary>
        </member>
        <member name="F:Sias.PipArm.SAddedLiquidHistoryEntry._Liquid">
            <summary>Concerned liquid field</summary>
        </member>
        <member name="M:Sias.PipArm.SAddedLiquidHistoryEntry.#ctor">
            <summary>
            Default pick history entry construction.
            
            Creating a history entry with this constructor allows an assignment 
            for the properties until the entry type is assigned and the properties 
            are assigned.
            </summary>
        </member>
        <member name="M:Sias.PipArm.SAddedLiquidHistoryEntry.#ctor(System.String)">
            <summary>
            History entry XML string construction.
            </summary>
            <param name="Config">XML data string</param>
        </member>
        <member name="M:Sias.PipArm.SAddedLiquidHistoryEntry.#ctor(System.Int32,Sias.Core.Interfaces.ILiquid)">
            <summary>
            Pick history entry data construction.
            </summary>
            <param name="tipID">Tip identifier (100*ArmIndex + TipIndex) of the concerned tip</param>
            <param name="liquid">Concerned liquid</param>
        </member>
        <member name="M:Sias.PipArm.SAddedLiquidHistoryEntry.ToString">
            <summary>
            Convert to string.
            </summary>
            <returns>A string representation of the history entry</returns>
        </member>
        <member name="P:Sias.PipArm.SAddedLiquidHistoryEntry.TipID">
            <summary>Tip identification of the concerned tip property</summary>
        </member>
        <member name="P:Sias.PipArm.SAddedLiquidHistoryEntry.Liquid">
            <summary>Concerned liquid property</summary>
        </member>
        <member name="T:Sias.PipArm.SDispHistoryEntry">
            <summary>
            Dispense History entry.
            
            The dispense History entry is used to record when a liquid is dispensed to a cavity.
            It is stored at the cavities history after the liquid was transferred from the tip.
            </summary>
        </member>
        <member name="F:Sias.PipArm.SDispHistoryEntry._TipID">
            <summary>Tip identification of the concerned tip field</summary>
        </member>
        <member name="F:Sias.PipArm.SDispHistoryEntry._Liquid">
            <summary>Concerned liquid field</summary>
        </member>
        <member name="F:Sias.PipArm.SDispHistoryEntry._LiquidHistory">
            <summary>The history of the concerned liquid field</summary>
        </member>
        <member name="M:Sias.PipArm.SDispHistoryEntry.#ctor">
            <summary>
            Default pick history entry construction.
            
            Creating a history entry with this constructor allows an assignment 
            for the properties until the entry type is assigned and the properties 
            are assigned.
            </summary>
        </member>
        <member name="M:Sias.PipArm.SDispHistoryEntry.#ctor(System.String)">
            <summary>
            History entry XML string construction.
            </summary>
            <param name="Config">XML data string</param>
        </member>
        <member name="M:Sias.PipArm.SDispHistoryEntry.#ctor(System.Int32,Sias.Core.Interfaces.ILiquid,Sias.Core.SHistory)">
            <summary>
            Pick history entry data construction.
            </summary>
            <param name="tipID">Tip identifier (100*ArmIndex + TipIndex) of the concerned tip</param>
            <param name="liquid">Concerned liquid</param>
            <param name="hist">History of the dispensed liquid(s)</param>
        </member>
        <member name="M:Sias.PipArm.SDispHistoryEntry.ToString">
            <summary>
            Convert to string.
            </summary>
            <returns>A string representation of the history entry</returns>
        </member>
        <member name="M:Sias.PipArm.SDispHistoryEntry.HistoryInfo(System.Int32)">
            <summary>
            Convert the history entry into an information string.
            </summary>
            <returns>History information string</returns>
        </member>
        <member name="M:Sias.PipArm.SDispHistoryEntry.EntryNode">
            <summary>
            Create a TreeView node representation this History Entry.
            </summary>
            <returns>TreeView node representation the Entry</returns>
        </member>
        <member name="P:Sias.PipArm.SDispHistoryEntry.TipID">
            <summary>Tip identification of the concerned tip property</summary>
        </member>
        <member name="P:Sias.PipArm.SDispHistoryEntry.Liquid">
            <summary>Concerned liquid property</summary>
        </member>
        <member name="P:Sias.PipArm.SDispHistoryEntry.LiquidHistory">
            <summary>The history of the concerned liquid property</summary>
        </member>
        <member name="T:Sias.PipArm.SPickedHistoryEntry">
            <summary>
            Pick History entry.
            
            The pick history entry is used to record when a liquid is picked from a cavity. It is 
            stored at the cavity history to record the aspiration of the liquid. It keeps a list
            of the tips picked the liquid and in addition the state of the picked liquid.
            </summary>
        </member>
        <member name="F:Sias.PipArm.SPickedHistoryEntry._Tips">
            <summary>Concerned tip(s) field</summary>
        </member>
        <member name="F:Sias.PipArm.SPickedHistoryEntry._Liquid">
            <summary>Concerned liquid field</summary>
        </member>
        <member name="M:Sias.PipArm.SPickedHistoryEntry.#ctor">
            <summary>
            Default pick history entry construction.
            
            Creating a history entry with this constructor allows an assignment 
            for the properties until the entry type is assigned and the properties 
            are assigned.
            </summary>
        </member>
        <member name="M:Sias.PipArm.SPickedHistoryEntry.#ctor(System.String)">
            <summary>
            History entry XML string construction.
            </summary>
            <param name="Config">XML data string</param>
        </member>
        <member name="M:Sias.PipArm.SPickedHistoryEntry.#ctor(Sias.PipArm.STipMap,Sias.Core.Interfaces.ILiquid)">
            <summary>
            Pick history entry data construction.
            </summary>
            <param name="tips">Concerned tips</param>
            <param name="liquid">Concerned liquid</param>
        </member>
        <member name="M:Sias.PipArm.SPickedHistoryEntry.ToString">
            <summary>
            Convert to string.
            </summary>
            <returns>A string representation of the history entry</returns>
        </member>
        <member name="P:Sias.PipArm.SPickedHistoryEntry.Tips">
            <summary>Concerned tip(s) property</summary>
        </member>
        <member name="P:Sias.PipArm.SPickedHistoryEntry.Liquid">
            <summary>Concerned liquid property</summary>
        </member>
        <member name="T:Sias.PipArm.SSpitBackHistoryEntry">
            <summary>
            Pick History entry.
            
            The pick History entry is used to record when a liquid is picked from a cavity. It is 
            stored at the cavity history to record the aspiration of the liquid. It keeps a list
            of the tips picked the liquid and in addition the state of the picked liquid. \n
            This history entry is created at the PipArm.Mixing method.
            </summary>
        </member>
        <member name="F:Sias.PipArm.SSpitBackHistoryEntry._Tips">
            <summary>Concerned tip(s) field</summary>
        </member>
        <member name="F:Sias.PipArm.SSpitBackHistoryEntry._Volume">
            <summary>Spit back volume field</summary>
        </member>
        <member name="M:Sias.PipArm.SSpitBackHistoryEntry.#ctor">
            <summary>
            Default pick history entry construction.
            
            Creating a history entry with this constructor allows an assignment 
            for the properties until the entry type is assigned and the properties 
            are assigned.
            </summary>
        </member>
        <member name="M:Sias.PipArm.SSpitBackHistoryEntry.#ctor(System.String)">
            <summary>
            History entry XML string construction.
            </summary>
            <param name="Config">XML data string</param>
        </member>
        <member name="M:Sias.PipArm.SSpitBackHistoryEntry.#ctor(Sias.PipArm.STipMap,System.Double)">
            <summary>
            Pick history entry data construction.
            </summary>
            <param name="tips">Concerned tips</param>
            <param name="volume">Concerned volume</param>
        </member>
        <member name="M:Sias.PipArm.SSpitBackHistoryEntry.ToString">
            <summary>
            Convert to string.
            </summary>
            <returns>A string representation of the history entry</returns>
        </member>
        <member name="P:Sias.PipArm.SSpitBackHistoryEntry.Tips">
            <summary>Concerned tip(s) property</summary>
        </member>
        <member name="P:Sias.PipArm.SSpitBackHistoryEntry.Volume">
            <summary>Spit back volume property</summary>
        </member>
        <member name="T:Sias.PipArm.SMixingHistoryEntry">
            <summary>
            Mixing History entry.
            
            The mixing History entry is used to record a mixing. It will only be saved in the 
            concerned cavities. It keeps a list of the mixing tips and a copy of the mixing parameters.\n
            This history entry is created at the PipArm.Mixing method.
            </summary>
        </member>
        <member name="F:Sias.PipArm.SMixingHistoryEntry._Tips">
            <summary>Concerned tip(s) field</summary>
        </member>
        <member name="F:Sias.PipArm.SMixingHistoryEntry._MixPar">
            <summary>Mixing parameter field</summary>
        </member>
        <member name="M:Sias.PipArm.SMixingHistoryEntry.#ctor">
            <summary>
            Default pick history entry construction.
            
            Creating a history entry with this constructor allows an assignment 
            for the properties until the entry type is assigned and the properties 
            are assigned.
            </summary>
        </member>
        <member name="M:Sias.PipArm.SMixingHistoryEntry.#ctor(System.String)">
            <summary>
            History entry XML string construction.
            </summary>
            <param name="Config">XML data string</param>
        </member>
        <member name="M:Sias.PipArm.SMixingHistoryEntry.#ctor(Sias.PipArm.STipMap,Sias.PipArm.SMixPar)">
            <summary>
            Mixing history entry data construction.
            </summary>
            <param name="tips">Concerned tips</param>
            <param name="mixPar">Mixing parameter (will be copied)</param>
        </member>
        <member name="M:Sias.PipArm.SMixingHistoryEntry.ToString">
            <summary>
            Convert to string.
            </summary>
            <returns>A string representation of the history entry</returns>
        </member>
        <member name="P:Sias.PipArm.SMixingHistoryEntry.Tips">
            <summary>Concerned tip(s) property</summary>
        </member>
        <member name="P:Sias.PipArm.SMixingHistoryEntry.MixPar">
            <summary>Mixing parameter property</summary>
        </member>
        <member name="T:Sias.PipArm.SDetectionHistoryEntry">
            <summary>
            Detection History entry.
            
            The detection history entry is used to record a liquid detection. It will be created 
            both if successfully and also if failed. \n
            This history entry is created from PipArm.SpitBack.
            </summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionHistoryEntry._Tips">
            <summary>Concerned tip(s) field</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionHistoryEntry._Volume">
            <summary>Spit back volume field</summary>
        </member>
        <member name="F:Sias.PipArm.SDetectionHistoryEntry._NoOfRetries">
            <summary>No of detection retries (volume changes) field</summary>
        </member>
        <member name="M:Sias.PipArm.SDetectionHistoryEntry.#ctor">
            <summary>
            Default pick history entry construction.
            
            Creating a history entry with this constructor allows an assignment 
            for the properties until the entry type is assigned and the properties 
            are assigned.
            </summary>
        </member>
        <member name="M:Sias.PipArm.SDetectionHistoryEntry.#ctor(System.String)">
            <summary>
            History entry XML string construction.
            </summary>
            <param name="Config">XML data string</param>
        </member>
        <member name="M:Sias.PipArm.SDetectionHistoryEntry.#ctor(Sias.PipArm.STipMap,System.Double)">
            <summary>
            Pick history entry data construction.
            </summary>
            <param name="tips">Concerned tips</param>
            <param name="volume">Concerned volume</param>
        </member>
        <member name="M:Sias.PipArm.SDetectionHistoryEntry.ToString">
            <summary>
            Convert to string.
            </summary>
            <returns>A string representation of the history entry</returns>
        </member>
        <member name="P:Sias.PipArm.SDetectionHistoryEntry.Tips">
            <summary>Concerned tip(s) property</summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionHistoryEntry.Volume">
            <summary>Spit back volume property</summary>
        </member>
        <member name="P:Sias.PipArm.SDetectionHistoryEntry.NoOfRetries">
            <summary>No of detection retries (volume changes) property</summary>
        </member>
        <member name="T:Sias.PipArm.SStateChangeHistoryEntry">
            <summary>
            Detection History entry.
            
            The detection history entry is used to record a liquid detection. It will be created 
            both if successfully and also if failed. \n
            This history entry is created from PipArm.SpitBack.
            </summary>
        </member>
        <member name="F:Sias.PipArm.SStateChangeHistoryEntry._Tips">
            <summary>Concerned tip(s) field</summary>
        </member>
        <member name="F:Sias.PipArm.SStateChangeHistoryEntry._NewState">
            <summary>New state field</summary>
        </member>
        <member name="M:Sias.PipArm.SStateChangeHistoryEntry.#ctor">
            <summary>
            Default pick history entry construction.
            
            Creating a history entry with this constructor allows an assignment 
            for the properties until the entry type is assigned and the properties 
            are assigned.
            </summary>
        </member>
        <member name="M:Sias.PipArm.SStateChangeHistoryEntry.#ctor(System.String)">
            <summary>
            History entry XML string construction.
            </summary>
            <param name="Config">XML data string</param>
        </member>
        <member name="M:Sias.PipArm.SStateChangeHistoryEntry.#ctor(System.Int32,Sias.Core.Interfaces.SLiquidState)">
            <summary>
            Pick history entry data construction.
            </summary>
            <param name="tip">Concerned tip</param>
            <param name="state">Concerned liquid state</param>
        </member>
        <member name="M:Sias.PipArm.SStateChangeHistoryEntry.ToString">
            <summary>
            Convert to string.
            </summary>
            <returns>A string representation of the history entry</returns>
        </member>
        <member name="P:Sias.PipArm.SStateChangeHistoryEntry.Tips">
            <summary>Concerned tip(s) property</summary>
        </member>
        <member name="P:Sias.PipArm.SStateChangeHistoryEntry.NewState">
            <summary>New state property</summary>
        </member>
        <member name="T:Sias.PipArm.SPipettingMethods">
            <summary>
            Pipetting methods class.
            
            This class contains the pipetting methods. Typically this methods will be wrapped 
            by the arm using them. That means an arm which is able to do pipetting typically 
            has a wrapper method for the used pipetting methods.
            </summary>
            <details>
            \ingroup    Dev_PipArm
            
            To make the pipetting methods working, the connected arms needs to have at least
            one pipetting Y/Z device implementing the \nlink{Sias,PipArm.IPipYZDevice} interface.
            
            The pipetting methods class implements 
             - a configuration property for its default wash station
             - a configuration property for the default aspiration offset
             - an OK-tip-map property defining the actually usable pipetting devices
             - a set of low level routines for moving tips, picking liquid ... 
             - a set of high level tool box functions for easier programming special 
               aspirate or dispense methods
             - a set of high level methods like Aspirate, Dispense, Flush, ... working
               directly using layout objects (mostly cavities).
             .
            </details>
            <remarks>
             - The pipetting methods may not working fine for arms where the pipetting devices 
               are not a single block!
             - Take care about the array sizes. The arrays need to have an element for each 
               <b>Y/Z Device</b>, also if the Y/Z device is not usable for pipetting!
             - On mixed Y/Z device configurations it is not allowed to define a non 
               pipetting Y/Z device (tip) for pipetting. It is recommended to use 
               \nlink{Sias::PipArm,SPipettingMethods.AllTips} to get the usable Y/Z devices.
             .
            </remarks>
            TODO: Add support for restricted areas 
        </member>
        <member name="F:Sias.PipArm.SPipettingMethods._DefaultAspirationOffset">
            <summary>Default aspiration offset field</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingMethods._DefaultWashStationName">
            <summary>Default wash station name field</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingMethods._PumpGroups">
            <summary>pump groups field</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingMethods._OkTips">
            <summary>Ok tip map</summary>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.OnLayoutAttachedOrRelease(Sias.BaseDev.SBaseRobotDevice,Sias.Core.Interfaces.ILayout)">
            <summary>
            Layout attached or layout release event
            </summary>
            <param name="Robot"></param>
            <param name="Layout"></param>
        </member>
        <member name="F:Sias.PipArm.SPipettingMethods._DefaultWashStation">
            <summary>Default wash station field</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingMethods._DTRackHoldRetractLimit">
            <summary>Retract limit for DT holding field</summary>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.#ctor">
            <summary>
            Initializes a new instance of the <b>SPipettingMethods</b> class.
            </summary>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.#ctor(Sias.RobotDev.SArmDevice)">
            <summary>
            Initializes a new instance of the <b>SPipettingMethods</b> class.
            </summary>
            <param name="ConnectedArm">The connected arm device</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.GetErrorInfos">
            <summary>
            This interface function returns the default error messages which can be 
            generated by this device.
            </summary>
            <returns>A collection with error information</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.GetPipYZDevice(System.Int32,Sias.PipArm.STipMap)">
            <summary>
            Helper function for easier Y/Z device access
            </summary>
            <param name="Tip">The index of the Y/Z device to check/get</param>
            <param name="UsedTips">The used \ref Used_Tips "tips"</param>
            <returns>a valid pipetting Y/Z device or null if tip not used/usable for pipetting</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.MaxValue(Sias.PipArm.STipMap,System.Double[])">
            <summary>
            Calculate the maximum of an (volume) array.
            </summary>
            <param name="Tips">Used \ref Used_Tips "tips"</param>
            <param name="Arr">Array of values (typically volumes)</param>
            <returns>The highest value of the used tips</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.ValArr(System.Int32,System.Double)">
            <summary>
            return a double array containing the same value for each tip
            </summary>
            <param name="MaxTip">No of tip = no of elements in array</param>
            <param name="v">array value</param>
            <returns>double array containing value <paramref name="v"/> for each tip</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.ZScan(System.Int32,Sias.Core.Interfaces.SCavityCollection,System.Double)">
            <summary>
            return a double array with (corrected) cavity scan heights
            </summary>
            <param name="MaxTip">No of tip = no of elements in array</param>
            <param name="Cav">List of cavities</param>
            <param name="Offset">Offset for cavity scan heights</param>
            <returns>array with (corrected) cavity scan heights</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.ZDisp(System.Int32,Sias.Core.Interfaces.SCavityCollection,System.Double)">
            <summary>
            return a double array with (corrected) cavity dispense heights
            </summary>
            <param name="MaxTip">No of tip = no of elements in array</param>
            <param name="Cav">List of cavities</param>
            <param name="Offset">Offset for cavity dispense heights</param>
            <returns>array with (corrected) cavity dispense heights</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.Z_Max(System.Int32,Sias.Core.Interfaces.SCavityCollection,System.Double)">
            <summary>
            return a double array with (corrected) cavity max heights
            </summary>
            <param name="MaxTip">No of tip = no of elements in array</param>
            <param name="Cav">List of cavities</param>
            <param name="Offset">Offset for cavity max heights</param>
            <returns>array with (corrected) cavity max heights</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.ArrSum(System.Double[],System.Double[])">
            <summary>
            calculate array with the sum of two arrays
            </summary>
            <param name="Op1">first array</param>
            <param name="Op2">second array</param>
            <returns>array with the sum of two arrays</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.ArrSum(System.Double[],System.Double)">
            <summary>
            Calculate an array with offsets
            </summary>
            <param name="Op1">origin Array</param>
            <param name="Op2">Offset</param>
            <returns>Array with (corrected) values</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.AddTipState(Sias.PipArm.STipMap,Sias.Core.Interfaces.SLiquidState.EM)">
            <summary>
            Add the specified tip error state to all tips defined by <paramref name="UseTips"/>.
            </summary>
            <param name="UseTips">The \ref Used_Tips "tips" to update</param>
            <param name="Error">The liquid state error to add</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.DelTipState(Sias.PipArm.STipMap,Sias.Core.Interfaces.SLiquidState.EM)">
            <summary>
            Remove (delete) the specified tip error state from tips defined by <paramref name="UseTips"/>.
            </summary>
            <param name="UseTips">The \ref Used_Tips "tips" to update</param>
            <param name="Error">The liquid state error to remove (delete)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.DisableNextZErrors(Sias.PipArm.STipMap)">
            <summary>Disable error for the next Z movements</summary>
            <param name="UseTips">The \ref Used_Tips "tips" where to disable the error</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.InitPipettingPumps(Sias.PipArm.STipMap,Sias.BaseDev.SDeviceInitOptions)">
            <summary>Initialize the selected pipetting pumps</summary>
            <param name="Tips">The \ref Used_Tips "tips" to init</param>
            <param name="InitOptions">Init options (only the group is checked)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.InitPipettingPumps(Sias.BaseDev.SDeviceInitOptions)">
            <summary>
            Initialize all pipetting pumps at the given waste cavities.
            </summary>
            <param name="InitOptions">Init options (only the group is checked)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.MoveZ(Sias.PipArm.STipMap,System.Double,System.Double,System.Double)">
            <summary>
            Move the Z motors to the specified worktable height and wait until the 
            moves are finished.
            </summary>
            <param name="UseTips">The \ref Used_Tips "tips" to move</param>
            <param name="Z">The destination worktable position (all the same)</param>
            <param name="Speed">The moving speed (all the same, 0=default motor speed)</param>
            <param name="Ramp">The moving ramp (all the same, 0=default motor ramp)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.MoveZ(Sias.PipArm.STipMap,System.Double,System.Double)">
            <summary>
            Move the Z motors to the specified worktable height and wait until the 
            moves are finished.
            </summary>
            <param name="UseTips">The \ref Used_Tips "tips" to move</param>
            <param name="Z">The destination worktable position (all the same)</param>
            <param name="Speed">The moving speed (all the same, 0=default motor speed)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.MoveZ(Sias.PipArm.STipMap,System.Double[],System.Double,System.Double)">
            <summary>
            Move the Z motors to the specified worktable heights and wait until the 
            moves are finished.
            </summary>
            <param name="UseTips">The \ref Used_Tips "tips" to move</param>
            <param name="Z">The destination worktable positions (one for each available tip)</param>
            <param name="Speed">The moving speed (all the same, 0=default motor speed)</param>
            <param name="Ramp">The moving ramp (all the same, 0=default motor ramp)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.MoveZ(Sias.PipArm.STipMap,System.Double[],System.Double)">
            <summary>
            Move the Z motors to the specified worktable heights and wait until the 
            moves are finished.
            </summary>
            <param name="UseTips">The \ref Used_Tips "tips" to move</param>
            <param name="Z">The destination worktable positions (one for each available tip)</param>
            <param name="Speed">The moving speed (all the same, 0=default motor speed)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.BlockMoveZ(Sias.PipArm.STipMap,System.Double,System.Byte,System.Double,System.Double)">
            <summary>
            Move the Z motors to the specified worktable height using a block move.
            Then the method waits until the moves are finished.
            </summary>
            <param name="UseTips">The \ref Used_Tips "tips" to move</param>
            <param name="Z">The destination worktable position (all the same)</param>
            <param name="BlockMode">Block move mode: 
             - 0: normal move  (full power)
             - 1: block move 1 (full power, reduced block recognition time)
             - 2: block move 2 (medium power, reduced block recognition time)
             - 3: block move 3 (low power, reduced block recognition time)
            </param>
            <param name="Speed">The moving speed (all the same, 0=default motor speed)</param>
            <param name="Ramp">The moving ramp (all the same, 0=default motor ramp)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.BlockMoveZ(Sias.PipArm.STipMap,System.Double,System.Byte,System.Double)">
            <summary>
            Move the Z motors to the specified worktable height using a block move.
            Then the method waits until the moves are finished.
            </summary>
            <param name="UseTips">The \ref Used_Tips "tips" to move</param>
            <param name="Z">The destination worktable position (all the same)</param>
            <param name="BlockMode">Block move mode: 
             - 0: normal move  (full power)
             - 1: block move 1 (full power, reduced block recognition time)
             - 2: block move 2 (medium power, reduced block recognition time)
             - 3: block move 3 (low power, reduced block recognition time)
             .
            </param>
            <param name="Speed">The moving speed (all the same, 0=default motor speed)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.BlockMoveZ(Sias.PipArm.STipMap,System.Double[],System.Byte,System.Double,System.Double)">
            <summary>
            Move the Z motors to the specified worktable heights using a block move.
            Then the method waits until the moves are finished.
            </summary>
            <param name="UseTips">The \ref Used_Tips "tips" to move</param>
            <param name="Z">The destination worktable positions (one for each available tip)</param>
            <param name="BlockMode">Block move mode: 
             - 0: normal move  (full power)
             - 1: block move 1 (full power, reduced block recognition time)
             - 2: block move 2 (medium power, reduced block recognition time)
             - 3: block move 3 (low power, reduced block recognition time)
             .
            </param>
            <param name="Speed">The moving speed (all the same, 0=default motor speed)</param>
            <param name="Ramp">The moving ramp (all the same, 0=default motor ramp)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.BlockMoveZ(Sias.PipArm.STipMap,System.Double[],System.Byte,System.Double)">
            <summary>
            Move the Z motors to the specified worktable heights using a block move.
            Then the method waits until the moves are finished.
            </summary>
            <param name="UseTips">The \ref Used_Tips "tips" to move</param>
            <param name="Z">The destination worktable positions (one for each available tip)</param>
            <param name="BlockMode">Block move mode: 
             - 0: normal move  (full power)
             - 1: block move 1 (full power, reduced block recognition time)
             - 2: block move 2 (medium power, reduced block recognition time)
             - 3: block move 3 (low power, reduced block recognition time)
             .
            </param>
            <param name="Speed">The moving speed (all the same, 0=default motor speed)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.MoveZRel(Sias.PipArm.STipMap,System.Double,System.Double)">
            <summary>
            Move the Z motors relative to the specified worktable height.
            Then the method waits until the moves are finished.
            </summary>
            <param name="UseTips">The \ref Used_Tips "tips" to move</param>
            <param name="Z">The relative worktable height distance (all the same)</param>
            <param name="Speed">The moving speed (all the same, 0=default motor speed)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.MoveZRel(Sias.PipArm.STipMap,System.Double[],System.Double)">
            <summary>
            Move the Z motors relative to the specified worktable height.
            Then the method waits until the moves are finished.
            </summary>
            <param name="UseTips">The \ref Used_Tips "tips" to move</param>
            <param name="Z">The relative worktable height distances (one for each available tip)</param>
            <param name="Speed">The moving speed (all the same, 0=default motor speed)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.MoveZTravel(System.Double)">
            <summary>
            Make sure the tips are at least at the defined worktable travel height.
            
            Take Care: Only tips lower than the defined height will be moved!
            </summary>
            <param name="ZTravel">Travel height (worktable coordinate)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.LowestZ(Sias.PipArm.STipMap,System.Double)">
            <summary>
            Returns the height of the lowest of the defined tips.
            </summary>
            <param name="CheckTips">The \ref Used_Tips "tips" to check</param>
            <param name="Zmin">Minimum Height to return</param>
            <returns>Height of the lowest tip</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.MoveToLowestTip(Sias.PipArm.STipMap,Sias.PipArm.STipMap,System.Double)">
            <summary>
            This method moves all tips defined by \a MoveTips to the same height as the lowest of the 
            tips returned by LowestZ().
            </summary>
            <param name="CheckTips">Selects the \ref Used_Tips "tips" to check</param>
            <param name="MoveTips">Selects the \ref Used_Tips "tips" to move</param>
            <param name="Zmin">Minimum Z value</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.LiquidTips(Sias.PipArm.STipMap,System.Double[])">
            <summary>
            Returns a tip map of all Z axes with detection flag set. In addition the method 
            fills the given liquid position array with the worktable positions of all not moving
            Z axes.
            </summary>
            <param name="ChkTips">The \ref Used_Tips "tips" to check (only those who have detected)</param>
            <param name="LiqPos">Return array for the positions (null for none)</param>
            <returns></returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.MoveXY(System.Double,System.Double[])">
            <summary>
            Move tips to defined positions.
            </summary>
            <param name="XPos">X position to move to</param>
            <param name="YPos">Y positions for the Y/Z devices</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.MoveXYRange(Sias.PipArm.STipMap,System.Double,System.Double,System.Double[],System.Double[])">
            <summary>
            Move tips to any position at the defined range.
            
            If all tips are in the defined ranges the tips will not move.\n
            If the tips have to move, the method tries to get a maximum of space to the range 
            borders.
            Take Care:	This function will not work fine for overlapping tip ranges. 
            			For overlapping tip ranges the pended tips should have an 
            			equidistant position over the whole overlapping range !
            </summary>
            <param name="UsedTips">The \ref Used_Tips "tips" to optimize</param>
            <param name="XMin">Minimum of X range</param>
            <param name="XMax">Maximum of X Range</param>
            <param name="YMin">Minimums of the Y Ranges</param>
            <param name="YMax">Maximums of the Y Ranges</param>
            ToDo: Find optimal Y positions in MoveXYRange
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.GetPipettingGroups(Sias.PipArm.STipMap,Sias.PipArm.SPipettingPar)">
            <summary>
            Calculate pipetting groups 
            
            This method is used to calculate the tip pipetting groups. A Tip pipetting
            Group is a tip map of tips which are allowed to pick liquid in parallel.\n
            In non multiplex systems all tips are allowed to pick at the same time 
            (parallel), so the method returns always a pipetting group list with exactly 
            one pipetting group containing all used tips.
            In multiplex systems the method will collect tips in different pump groups 
            to work in parallel but separates tips of the same pump group to different 
            pipetting tip groups.\n
            Setting PipPar.ForceParallelPipetting to true allows usage of tips in the
            same pump group also in the same pipetting group as long as the pipetting 
            parameters (Volume, Speed and Ramp) are compatible.
            </summary>
            <param name="Tips">The tips used for pipetting</param>
            <param name="PipPar">The used pipetting parameters</param>
            <returns>List of pipetting group tip maps.</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.TurnValves(Sias.PipArm.STipMap,System.UInt16)">
            <summary>
            Turn the valves (set the valve indexes) of the defined tips.
            </summary>
            <param name="Tips">The \ref Used_Tips "tips" to change</param>
            <param name="VInx">New valve index (\b see \ref Sias::CanDev::eVALVE_INDEX_CONST)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.PickLiquid(Sias.PipArm.STipMap,Sias.PipArm.SPipettingPar,System.UInt16,System.Double[],System.Double[])">
            <summary>
            Pick (aspirate) liquid.
            
            This methods picks liquid starting at actual height. While picking liquid the 
            tips went down depending on <paramref name="TWay"/>.
            </summary>
            <remarks>
            \b Important:   Take care about the tracking on multiplex systems! Tips in the same bottle and 
                            the same pump group may have an incorrect tracking in case this method is called 
                            directly. Try using PickLiq instead.
            </remarks>
            <param name="Tips">The \ref Used_Tips "tips" to pick liquid</param>
            <param name="PipPar">\ref Pipetting_PipPar "Pipetting parameters" (Z positioning ignored)</param>
            <param name="VInx">Valve index (\b see \ref Sias::CanDev::eVALVE_INDEX_CONST)</param>
            <param name="TWay">Tracking way (how far moving down while aspiration)</param>
            <param name="TSpeed">Tracking speed (how fast moving down while aspiration)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.PickLiquid(Sias.PipArm.STipMap,Sias.PipArm.SPipettingPar,System.UInt16)">
            <summary>
            Pick (aspirate) liquid without tracking.
            
            This method aspirates liquid at the defined position. While aspiration the
            tip height will not change.
            </summary>
            <param name="Tips">The \ref Used_Tips "tips" to pick liquid</param>
            <param name="PipPar">\ref Pipetting_PipPar "Pipetting parameters" (Z positioning ignored)</param>
            <param name="VInx">Valve index (\b see \ref Sias::CanDev::eVALVE_INDEX_CONST)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.DispLiquid(Sias.PipArm.STipMap,Sias.PipArm.SPipettingPar,System.UInt16,System.Double[],System.Double[])">
            <summary>
            Dispense liquid.
            
            This methods dispense liquid starting at actual height. While dispensing liquid the 
            tips went up depending on <paramref name="TWay"/>. 
            </summary>
            <remarks>
            \b Important:   The method will not use <paramref name="PipPar"/>.Delay. \n
            \b Important:   Take care about the tracking on multiplex systems! Tips in the same bottle and 
                            the same pump group may have an incorrect tracking in case this method is called 
                            directly. Try using DispLiq instead.
            </remarks>
            <param name="Tips">The \ref Used_Tips "tips" to dispense liquid</param>
            <param name="PipPar">\ref Pipetting_PipPar "Pipetting parameters" (Z positioning ignored)</param>
            <param name="VInx">Valve index (\b see \ref Sias::CanDev::eVALVE_INDEX_CONST)</param>
            <param name="TWay">Tracking way (how far moving up while dispensing)</param>
            <param name="TSpeed">Tracking speed (how fast moving up while dispensing)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.DispLiquid(Sias.PipArm.STipMap,Sias.PipArm.SPipettingPar,System.UInt16)">
            <summary>
            Dispense liquid without tracking.
            
            This method dispenses liquid at the defined position. While dispensing the
            tip height will not change.\n
            \b Important:   The method will not use <paramref name="PipPar"/>.Delay. \n
            </summary>
            <param name="Tips">The \ref Used_Tips "tips" to dispense liquid</param>
            <param name="PipPar">\ref Pipetting_PipPar "Pipetting parameters" (Z positioning ignored)</param>
            <param name="VInx">Valve index (\b see \ref Sias::CanDev::eVALVE_INDEX_CONST)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.EmptyTips(Sias.PipArm.STipMap,Sias.PipArm.SPipettingPar,System.UInt16)">
            <summary>
            Dispense liquid.
            </summary>
            <param name="Tips">The \ref Used_Tips "tips" to empty</param>
            <param name="PipPar">\ref Pipetting_PipPar "Pipetting parameters" (Volume and Z positioning ignored)</param>
            <param name="VInx">Valve index (\b see \ref Sias::CanDev::eVALVE_INDEX_CONST)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.Flush(Sias.PipArm.STipMap,Sias.PipArm.SPipettingPar)">
            <summary>
            Flush with the defined tips without changing the valve index.
            </summary>
            <param name="Tips">The \ref Used_Tips "tips" used for flushing</param>
            <param name="FlushPar">The flush parameters including volume, speed and ramp</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.FlushSyringe(Sias.PipArm.STipMap,Sias.PipArm.SPipettingPar)">
            <summary>
            Flush with the defined tips with value index \ref Sias::CanDev::eVALVE_INDEX_CONST "VI_TIP1_SYR".
            All un\ref Pipetting_PipPar "Pipetting parameters"  are set to \ref Sias::CanDev::eVALVE_INDEX_CONST "VI_SYS_SYR".
            </summary>
            <param name="Tips">The \ref Used_Tips "tips" used for flushing</param>
            <param name="FlushPar">The flush parameters including volume, speed and ramp</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.FlushPeripump(Sias.PipArm.STipMap,Sias.PipArm.SPipettingPar)">
            <summary>
            Flush with the defined tips with value index \ref Sias::CanDev::eVALVE_INDEX_CONST "VI_TIP1_PUMP".
            All un\ref Pipetting_PipPar "Pipetting parameters"  are set to \ref Sias::CanDev::eVALVE_INDEX_CONST "VI_SYS_PUMP".
            </summary>
            <param name="Tips">The \ref Used_Tips "tips" used for flushing</param>
            <param name="FlushPar">The flush parameters including volume, speed and ramp</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.WasteCavities(Sias.Core.Interfaces.IItem)">
            <summary>
            Get waste cavities from the given wash station.
            
            This method is used to get the waste cavities from a wash station. In general 
            the wash cavities should be marked with a custom attribute "waste". If this 
            attribute is not found the method tries to find the correct cavities using 
            the cavity names (the name needs to include ":Waste")
            </summary>
            <param name="WashStation">The wash station.</param>
            <returns>A cavity collection with the wash cavities</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.WashCavities(Sias.Core.Interfaces.IItem)">
            <summary>
            Get wash cavities from the given wash station.
            This method is used to get the wash cavities from a wash station. In general 
            the wash cavities should be marked with a custom attribute "Wash". If this 
            attribute is not found the method tries to find the correct cavities using 
            the cavity names (the name needs to include ":Wash")
            </summary>
            <param name="WashStation">The wash station.</param>
            <returns>A cavity collection with the wash cavities</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.MoveToZPipPos(Sias.PipArm.STipMap,Sias.PipArm.SPipettingPar,Sias.Core.Interfaces.SCavityCollection,System.Double[])">
            <summary>
            Move to pipetting Z position.
            
            This method interprets the Z positioning mode and the Z offset from the SPipettingPar
            class to find the expected pipetting position. 
            If the Z positioning mode is DefaultPosition the method supports two different modes:
             a) If a default position is given (DefaultZPos != null) the method moves relative 
               to the given default positon.\n
             b) If no Default position is given (DefaultZPos == null) the method moves relative 
               to the actual position (==> no move if offset is 0). \n
            </summary>
            <param name="Tips">The \ref Used_Tips "tips" to move</param>
            <param name="PipPar">The pipetting parameter (defining the move mode and offsets)</param>
            <param name="Cav">The cavity collection (defining the cavity position)</param>
            <param name="DefaultZPos">Default Z positions (null = actual position)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.DetectLiquid(Sias.PipArm.STipMap,System.Double[],System.Double[],System.Double,System.Double)">
            <summary>
            Start a detection (scan) move on the defined tips.
            
            The methods defines the scan move in a way that the axis moves below the defined 
            maximum heights (ZMax).
            
            Sequence:
             - Optionally move all tips to their start positions (ZStart) using the default speed
             - Start a detection (scan) move to the maximum height (ZMax) using the default LiquidScanSpeed
             .
            </summary>
            <param name="UsedTips">The used \ref Used_Tips "tips"</param>
            <param name="ZStart">Scan start positions</param>
            <param name="ZMax">Scan move destination positions (lowest allowed height)</param>
            <param name="Sub">Submerge way [mm](how deep to dip into the liquid) </param>
            <param name="LiquidScanSpeed">Scan move speed [mm/s]</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.StartDetectMoves(Sias.PipArm.STipMap,System.Double[],System.Double,System.Double,System.Boolean,System.Boolean)">
             <summary>
             Start a detection (scan) move on the defined tips.
            
             The methods defines the scan move in a way that the axis moves below the defined 
             maximum heights (ZMax).
             Sequence:
              - Optionally move all tips to their start positions (ZStart) using the default speed
              - Start a detection (scan) move to the maximum height (ZMax) using the default LiquidScanSpeed
              .
             </summary>
             <param name="UsedTips">The used \ref Used_Tips "tips"</param>
             <param name="ZMax">Scan move destination positions (lowest allowed height)</param>
             <param name="Sub">Submerge way [mm](how deep to dip into the liquid) </param>
             <param name="LiquidScanSpeed">Scan move speed [mm/s]</param>
             <param name="DoEvenOdd">True if even/odd tips should be executed independently</param>
             <param name="DoSingle">True if each tip will be executed independently</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.TipOK(System.Int32,Sias.Core.Interfaces.ICavity)">
            <summary>
            Calculate whether it is possible to access the pipetting area of the given 
            cavity with the tip of the given tip index. 
            </summary>
            <param name="Tip">Tip index of the tip to check</param>
            <param name="Cavity">Cavities to check</param>
            <returns>True if cavity is accessible; false if not</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.ScanLiquid(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection,Sias.PipArm.SDetectionPar,System.Double[],System.Double[])">
            <summary>
            Scan for liquid.
            
            This method scans for liquid. Therefore it uses the given cavities for getting the 
            heights and volumes. It supports also more then one tip using the same cavity.
            </summary>
            <param name="Tips">The \ref Used_Tips "tips" to scan for liquid</param>
            <param name="Cavities">A cavity for each tip</param>
            <param name="DetPar">\ref DetectionPar</param>
            <param name="Vol">Minimum volume expected</param>
            <param name="IsVol">Return array for the detected volumes</param>
            <returns>The \ref Used_Tips "tips" detected enough liquid</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.SetLQMode(Sias.PipArm.STipMap,Sias.PipArm.SDetectionPar)">
            <summary>
            Set level sensor mode.
            </summary>
            <param name="UsedTips">The \ref Used_Tips "tips" used for liquid scanning</param>
            <param name="DetPar">\ref DetectionPar</param>
            <returns>The \ref Used_Tips "tips" not able to set LQ mode</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.MoveAspPos(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection,Sias.PipArm.SDetectionPar,Sias.PipArm.SPipettingPar,System.Double[])">
            <summary>
            Move to aspiration position.
            
            This method moves to the aspiration position.
            </summary>
            <details>
            The aspiration position depends 
            on the level detection mode (DetPar) and on the pipetting parameters Z positioning 
            mode (DetVol.ZMode):
             - ZMode=DefaultPosition with successful liquid Detection \n
            	The default position will be the liquid position. It is recommended to have 
            	DetVol.ZOffset[] to the same value as DetPar.Submerge. This will result in
            	having no additional move after a successful detection.
             - ZMode=DefaultPosition with failed liquid Detection (no detection)\n
                The default position will be the position for volume=0. As this is mostly
            	below the cavities maximum height it is limited to the cavities maximum height.
             - ZMode=DefaultPosition without liquid Detection \n
            	The default position is DefaultAspirationOffset above the maximum cavity height.
             - ZMode=RelativeToTravelHeight \n
            	The aspiration position will be independent of an optional former detection 
            	at Cavities.TravelHeight + DetVol.ZOffset.
             - ZMode=RelativeToScanHeight \n
            	The aspiration position will be independent of an optional former detection 
            	at Cavities.ScanHeight + DetVol.ZOffset.
             - ZMode=RelativeToDispenseHeight \n
            	The aspiration position will be independent of an optional former detection 
            	at Cavities.DispenseHeight + DetVol.ZOffset.
             - ZMode=RelativeToMaxHeight \n
            	The aspiration position will be independent of an optional former detection 
            	at Cavities.MaxHeight + DetVol.ZOffset.
             - ZMode=RelativeToLiquidPosition \n
            	The aspiration position will be independent of an optional former detection 
            	at Cavities.HeightFromVolume(Cavities.Volume) + DetVol.ZOffset. DetVol.ZOffset is
                in this case more or less the submerge. \n
            	<b>IMPORTANT:</b> If not using DetPar.SetVolumeToCavity=true the cavity volume may 
                differ from a detected volume!
             .
            
            <b>IMPORTANT:</b>independent of all calculation described above, the position will be
            			limited to a range between Cavities.ScanHeight and Cavities[Tip].MaxHeight.
            </details>
            <param name="UsedTips">The \ref Used_Tips "tips" to move</param>
            <param name="Cavities">The used cavities</param>
            <param name="DetPar">\ref DetectionPar</param>
            <param name="DetVol">Detection volume and pipetting parameters</param>
            <param name="IsVol">Return array for cavity volumes</param>
            <returns>The \ref Used_Tips "tips" using tracking at aspiration</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.MoveDspPos(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection,Sias.PipArm.SDetectionPar,Sias.PipArm.SPipettingPar,System.Double[])">
            <summary>
            Move to dispense position.
            
            This method moves to the dispense position. 
            </summary>
            <details>
            The dispense position depends on the level detection mode (DetPar) and on the pipetting 
            parameters Z positioning 
            mode (DetVol.ZMode):
             - ZMode=DefaultPosition with successful liquid Detection \n
            	The tip will not move! ==> submerge below liquid level.
             - ZMode=DefaultPosition without or with failed liquid Detection (no detection)\n
                The default position is the dispense position (see RelativeToDispenseHeight)
             - ZMode=RelativeToTravelHeight \n
            	The aspiration position will be independent of an optional former detection 
            	at Cavities.TravelHeight + DetVol.ZOffset.
             - ZMode=RelativeToScanHeight \n
            	The aspiration position will be independent of an optional former detection 
            	at Cavities.ScanHeight + DetVol.ZOffset.
             - ZMode=RelativeToDispenseHeight \n
            	The aspiration position will be independent of an optional former detection 
            	at Cavities.DispenseHeight + DetVol.ZOffset.
             - ZMode=RelativeToMaxHeight \n
            	The aspiration position will be independent of an optional former detection 
            	at Cavities.MaxHeight + DetVol.ZOffset.
             - ZMode=RelativeToLiquidPosition \n
            	The aspiration position will be independent of an optional former detection 
            	at Cavities.HeightFromVolume(Cavities.Volume) + DetVol.ZOffset. DetVol.ZOffset is
                in this case more or less the submerge. \n
            	IMPORTANT: If not using DetPar.SetVolumeToCavity=true the cavity volume may 
                differ from a detected volume!
             .
            
            IMPORTANT:	independent of all calculation described above, the position will be
            			limited to Cavities[Tip].MaxHeight.
            </details>
            <param name="UsedTips">The used \ref Used_Tips "tips"</param>
            <param name="Cavities">The used Cavities</param>
            <param name="DetPar">\ref DetectionPar</param>
            <param name="DetVol">Detection volume and pipetting parameters</param>
            <param name="IsVol">Return array for cavity volumes</param>
            <returns>The \ref Used_Tips "tips" using tracking at aspiration</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.CalculateTracking(Sias.PipArm.STipMap,Sias.Core.Interfaces.ICavity,Sias.PipArm.SPipettingPar,System.Double,System.Double[],System.Double[],System.Boolean)">
            <summary>
            Calculate tracking.
            
            As it is not possible to have a dynamic speed, the tracking needs to use the highest needed
            speed for the whole tracking. The highest speed is at that time, when ALL \ref Pipetting_PipPar "Pipetting parameters"  are pipetting 
            at the same time. This is at the start of the pipetting.
            </summary>
            <details>
            Calculation sequence:
             -# VolSum     = Sum of all volumes to aspirate or dispense
             -# SpeedSum   = Sum of all pipetting speeds
             -# TMin       = Minimum of all pipetting times (Volume / Speed)
            	(The minimum gets limited by getable volume in addition (getable Volume / SpeedSum)) \n
             -# Volume(TMin) = SpeedSum * TMin  (Volume of First pipetting section)
             -# Way(TMin)    = HeightForVolume(IsVol +- Volume(TMin)) - HeightForVolume(IsVol)
             -# TrackWay     = HeightForVolume(IsVol +- VolSum) - HeightForVolume(IsVol)
             -# TrackSpeed   = TrackWay * SpeedSum / VolSum
            </details>
            <param name="Tips">The used \ref Used_Tips "tips"</param>
            <param name="Cavity">Used Cavities</param>
            <param name="PipPar">Pipetting parameter</param>
            <param name="IsVol">Actual volume in Cavities</param>
            <param name="TWay">Tracking way return array</param>
            <param name="TSpeed">Tracking speed return array</param>
            <param name="IsTrackingForPick">true: calculate tracking for pick, false: calculate tracking for dispense</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.PickLiq(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection,Sias.PipArm.SPipettingPar,Sias.PipArm.STipMap,System.Double[])">
             <summary>
             Picks up liquid.
            
             This method picks up liquid from the actual Z positions. It takes care about the tracking.
             </summary>
             <param name="UsedTips">The used \ref Used_Tips "tips"</param>
             <param name="Cavities">Used Cavities</param>
             <param name="PipPar">Pipetting parameter</param>
             <param name="TTips">The tracking tips</param>
             <param name="IsVol">Actual volume in Cavities</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.PickAir(Sias.PipArm.STipMap,Sias.PipArm.SPipettingPar)">
             <summary>
             This method picks up air.
            
             Therefore the tips have to be out of any liquid when calling this method.
             </summary>
             <param name="UsedTips">The used \ref Used_Tips "tips"</param>
             <param name="AirPar">Air gap aspiration parameters (using only volume, speed and ramps)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.PickSys(Sias.PipArm.STipMap,Sias.PipArm.SPipettingPar)">
             <summary>
             Pick system liquid.
            
             Take care: This method will not work as expected on a disposable tip system!
             </summary>
             <param name="UsedTips">The used \ref Used_Tips "tips"</param>
             <param name="PipPar">Aspiration parameters (only using volume, speed and ramps)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.DispLiq(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection,Sias.PipArm.SPipettingPar,Sias.PipArm.STipMap,System.Double[])">
             <summary>
             Dispense liquid to cavities.
            
             This method dispenses the liquid at the actual Z positions, but optionally takes care about the tracking.
             </summary>
             <param name="UsedTips">The used \ref Used_Tips "tips"</param>
             <param name="Cavities">Used Cavities</param>
             <param name="PipPar">Pipetting parameter</param>
             <param name="TTips">The tracking tips</param>
             <param name="IsVol">Actual volumes in Cavities. This volumes get updated in method</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.SpitBack(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection,Sias.PipArm.SPipettingPar,Sias.PipArm.STipMap,System.Double[])">
             <summary>
             Spit back to cavities.
            
             This method dispenses the liquid at the actual Z positions, but optionally takes care about the tracking.
             In difference to DispLiq this method creates a SpitBack instead of an dispense history entry.
             \b Important:   If spit back is used the liquid of the origin cavity may get pipetting error 
                             or warning states found on pickup. So this will remain in the cavity also for 
                             all following actions!
             </summary>
             <remarks>
             \b Important: This method ignores ZMode and ZOffset defined with the PipPar parameter
             </remarks>
             <param name="UsedTips">The used \ref Used_Tips "tips"</param>
             <param name="Cavities">Used cavities</param>
             <param name="PipPar">Pipetting parameter</param>
             <param name="TTips">The tracking tips</param>
             <param name="IsVol">Actual volumes in cavities. This volumes get updated in method</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.RetractAndSpitBack(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection,Sias.PipArm.SDetectionPar,Sias.PipArm.SPipettingPar,Sias.PipArm.SPipettingPar,Sias.PipArm.STipMap,System.Double[])">
            <summary>
             Retract and Spit back
            
             This method retracts and spits back. Depending on the spit back position retract will
             be done either before or after spitting back.
             </summary>
            <param name="UsedTips">The used \ref Used_Tips "tips"</param>
            <param name="Cavities">Used cavities</param>
            <param name="DetPar">\ref DetectionPar (Should be identical to the ones used with the corresponding MoveAspPos)</param>
            <param name="PipPar">\ref Pipetting_PipPar "Pipetting parameters" (used for dispense and re-aspirate in case of clot errors)</param>
            <param name="Spit">\ref Pipetting_PipPar "Pipetting parameters" Pipetting parameter</param>
            <param name="TTips">The tracking tips</param>
            <param name="IsVol">Actual volumes in cavities. This volumes get updated in method</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.Retract(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection,Sias.PipArm.SDetectionPar,Sias.PipArm.SPipettingPar,System.Double[])">
             <summary>
             This method is used to retract out of the liquid.
            
             For correct working it is important to have the correct volume given with the IsVol parameter.
             </summary>
             <param name="UsedTips">The used \ref Used_Tips "tips"</param>
             <param name="Cavities">Used Cavities</param>
             <param name="DetPar">\ref DetectionPar (Should be identical to the ones used with the corresponding MoveAspPos)</param>
             <param name="PipPar">\ref Pipetting_PipPar "Pipetting parameters" (used for dispense and re-aspirate in case of clot errors)</param>
             <param name="IsVol">Actual cavity volumes</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.OutMove(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection,Sias.PipArm.SDetectionPar,System.Double[])">
             <summary>
             This method is used to make sure the tips are out of the liquid.
            
             In General this is done after a dispense. 
             Important: This method will only work fine if the cavity volume is well known!
             </summary>
             <param name="UsedTips">The used \ref Used_Tips "tips"</param>
             <param name="Cavities">Used Cavities</param>
             <param name="DetPar">\ref DetectionPar (here only used for retract speed and way)</param>
             <param name="IsVol">Actual cavity volumes</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.Mixing(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection,Sias.PipArm.SMixPar,Sias.PipArm.STipMap,System.Double[])">
             <summary>
             This high level tool box method executes the defined mixing cycles.
            
             <b>Attention:</b> The aspiration and dispense volume must not be different!
             </summary>
             <param name="UsedTips">The used \ref Used_Tips "tips"</param>
             <param name="Cavities">The used cavities</param>
             <param name="MixPar">The mixing parameters</param>
             <param name="TTips">Tracking tips</param>
             <param name="IsVol">Actual volume</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.ExecuteTemplate(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection,Sias.PipArm.SBasePipettingTemplate)">
            <summary>
            Pipetting template execution
            
            This method is used to execute a pipetting template.
            It takes care about
             - Cavities not accessible in one pipetting step and
             - Requesting pipetting access to the concerned cavities.
             .
            </summary>
            <param name="UsedTips">The used \ref Used_Tips "tips"</param>
            <param name="Cavities">Used cavities (one for each available tip)</param>
            <param name="Template">The pipetting principle</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.Aspirate(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection,Sias.PipArm.SPipettingPar,Sias.PipArm.SPipettingPar,Sias.PipArm.SPipettingPar,Sias.PipArm.SPipettingPar,Sias.PipArm.SMixPar,Sias.PipArm.SDetectionPar)">
            <summary>
            High level aspirate method.
            
            This method aspirates with the given tips from the given cavities. 
            </summary>
            <details>
            It takes care about
             - Cavities not accessible in one pipetting step.
             - Taking a separation air gap before picking liquid
             - Moving to aspiration position with optional liquid detection
             - An optional premixing before aspiration
             - Picking up the liquids with optional tracking
             - Retract (moving out) from the liquid with optionally clot detection
             - Optional spitting back liquid to the cavities
             - Taking a transportation air gap before the next X/Y movement.
             .
            </details>
            <param name="UsedTips">The used \ref Used_Tips "tips"</param>
            <param name="Cavities">Used cavities (one for each available tip)</param>
            <param name="Air1">Separation air gap parameters (before taking liquid)</param>
            <param name="Vol">Liquid pipetting parameters</param>
            <param name="Air2">Transportation air gap parameters (before next X/Y move)</param>
            <param name="Spit">Spit back volumes (null for no spit back)</param>
            <param name="MixPar">Mixing parameters (null for no mixing)</param>
            <param name="DetPar">\ref DetectionPar</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.Dispense(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection,Sias.PipArm.SPipettingPar,Sias.PipArm.SMixPar,Sias.PipArm.SDetectionPar,Sias.PipArm.SPipettingPar)">
            <summary>
            High level dispense method.
            
            This method dispenses with the given tips to the given cavities. 
            </summary>
            <details>
            It takes care about
             - Cavities not accessible in one pipetting step.
             - Moving to dispense position with optional liquid detection
             - Dispensing to the destination cavities with optional tracking
             - Retract 
             - An optional post mixing after dispense
             - Taking a transportation air gap before the next X/Y movement.
             .
            </details>
            <param name="UsedTips">The used \ref Used_Tips "tips"</param>
            <param name="Cavities">Used cavities (one for each available tip)</param>
            <param name="DspVol">Dispense volume (including air gaps you have to dispense)</param>
            <param name="MixPar">Mixing parameters (null for no mixing)</param>
            <param name="DetPar">\ref DetectionPar</param>
            <param name="Air2">Transportation air gap parameters (before next x/y move)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.DetectVolume(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection,Sias.PipArm.SDetectionPar)">
            <summary>
            Detect liquid volume in cavities.
            </summary>
            <param name="UsedTips">The used \ref Used_Tips "tips"</param>
            <param name="Cavities">Used Cavities</param>
            <param name="DetPar">\ref DetectionPar</param>
            <returns>Liquid volumes of the Cavities</returns>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.EmptyTips(Sias.PipArm.STipMap,Sias.PipArm.SPipettingPar,Sias.Core.Interfaces.IItem)">
            <summary>
            This method is used to remove all known liquid from the tips.
            
            When using pipetting pumps it is possible to dispense more liquid then aspirated. To keep
            the method (and all the liquid state handling) working correctly, it is very important only 
            to dispense what you have aspirated. That means if you want to dispense system liquid you 
            should call PickSys before dispensing. A pipetting pump will not move there, but it will
            update its state.
            </summary>
            <param name="UsedTips">The used \ref Used_Tips "tips"</param>
            <param name="DspPar">Dispense parameter (using speed and ramp)</param>
            <param name="WastePos">Wash/Waste station</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.WashTips(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection,Sias.PipArm.SPipettingPar)">
            <summary>
            Wash tips at the given cavities.
            </summary>
            <param name="UsedTips">The used \ref Used_Tips "tips"</param>
            <param name="WashCavities">Wash cavities</param>
            <param name="WashPar">Wash parameters (Volume, speeds, ramps)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.Wash(Sias.PipArm.STipMap,Sias.Core.Interfaces.IItem,Sias.PipArm.SPipettingPar,System.Double)">
            <summary>
            Wash tips at given wash station.
            
            if <paramref name="WashAtWastePart"/> is greater then 0 in addition to the wash at the wash cavities
            the method performs a wash at the waste station with the defined volume part but the same pipetting
            parameters. 
            </summary>
            <remarks>
            The wash volume used at the wash station will not be effected by <paramref name="WashAtWastePart"/>.
            </remarks>
            <param name="UsedTips">The used \ref Used_Tips "tips"</param>
            <param name="WashPos">Wash station</param>
            <param name="WashPar">
            Wash parameters (volume, speeds, ramps)\n
            \b Important:   WashPar.ZMode and WashPar.ZOffset are not recognized yet. Please keep ZMode 
                            at DefaultPosition and the Z Offsets at 0 to make sure the software keeps 
                            compatible in case we will recognize ZMode and ZOffset at one of the next 
                            SDK version.
            </param>
            <param name="WashAtWastePart">
            The part of the wash volume flushed on the waste station as a factor. A value of 0 
            deactivates WashAtWaste. A value of 1 uses the same volume for used for washing also 
            at the waste station.
            </param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.Wash(Sias.PipArm.STipMap,Sias.Core.Interfaces.IItem,Sias.PipArm.SPipettingPar)">
            <summary>
            Wash tips at given wash station.
            </summary>
            <remarks>No wash at waste part is defined!</remarks>
            <param name="UsedTips">The used \ref Used_Tips "tips"</param>
            <param name="WashPos">Wash station</param>
            <param name="WashPar">Wash parameters (volume, speeds, ramps)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.Waste(Sias.PipArm.STipMap,Sias.Core.Interfaces.IItem,Sias.PipArm.SPipettingPar)">
            <summary>
            Waste liquid to waste station.
            
            This method moves to the waste station defined by <paramref name="WastePos"/> to dispense the 
            liquid defined by <paramref name="WastePar"/> with the tips defined by <paramref name="UsedTips"/>.
            </summary>
            <param name="UsedTips">The used \ref Used_Tips "tips"</param>
            <param name="WastePos">Wash/waste station</param>
            <param name="WastePar">Waste Parameters (volumes, speeds, ramps)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.Waste(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection,Sias.PipArm.SPipettingPar)">
            <summary>
            Waste liquid to waste cavities.
            
            This method moves to the waste station defined by <paramref name="WasteCavities"/> to dispense the 
            liquid defined by <paramref name="WastePar"/> with the tips defined by <paramref name="UsedTips"/>.
            </summary>
            <param name="UsedTips">The used \ref Used_Tips "tips"</param>
            <param name="WasteCavities">List of cavities to put the waste</param>
            <param name="WastePar">Waste Parameters (volumes, speeds, ramps)</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.DropTips(Sias.PipArm.STipMap,Sias.PipArm.SDropTipsPar,Sias.DropStation.SDropStation)">
            <summary>
            Drop tips from the specified adapter(s) at the specified drop station.
            </summary>
            <param name="Tips">Adapters, where to drop the \ref Used_Tips "tips"</param>
            <param name="DropPar">Drop parameters like error handling modes, tip check modes, move power mode, speeds and ramps</param>
            <param name="DropStation">Drop station</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.MoveToDropPosition(Sias.DropStation.SDropStation,Sias.Core.SPosition,Sias.Core.SPosition)">
            <summary>
            
            </summary>
            <param name="DropStation"></param>
            <param name="Pos1"></param>
            <param name="Pos2"></param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.MoveToDropStart(Sias.DropStation.SDropStation,Sias.Core.SPosition)">
            <summary>
            
            </summary>
            <param name="DropStation"></param>
            <param name="Pos1"></param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.GetTips(Sias.PipArm.STipMap,Sias.Core.Interfaces.STipTypeCollection,Sias.PipArm.SGetTipsPar)">
            <summary>
            Get (pickup) disposable tips.
            
            This method is used to pickup disposable tips. Depending on the allowed 
            <paramref name="TipTypes"/> and the tip types allowed for the configured 
            tip adapters it may pick different tip types with a single call.
            </summary>
            <param name="Tips">The tip adapters we want to pick \ref Used_Tips "tips"</param>
            <param name="TipTypes">The tip types we want to get</param>
            <param name="GetPar">Get tips parameters (Error handling, Speeds, ramps, ...)</param>
            <remarks>
            \b Important: GetTips does not support tip check before or tip check after get yet 
                         (see SGetTipsPar.TipCheckBeforePick, SGetTipsPar.TipCheckAfterPick).
            </remarks>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.GetTips(Sias.PipArm.STipMap,Sias.Core.Interfaces.ITipType,Sias.PipArm.SGetTipsPar)">
            <summary>
            This method is designed to pickup disposable tips.
            </summary>
            <param name="Tips">The tip adapters we want to pick \ref Used_Tips "tips"</param>
            <param name="TipType">The tip type we want to get</param>
            <param name="GetPar">Get tips parameters (Error handling, Speeds, ramps, ...),</param>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.GetTips(Sias.PipArm.STipMap,Sias.PipArm.SGetTipsPar)">
            <summary>
            This method is designed to pickup disposable tips.
            </summary>
            <param name="Tips">The tip adapters we want to pick \ref Used_Tips "tips"</param>
            <param name="GetPar">Get tips parameters (Error handling, Speeds, ramps, ...),</param>
        </member>
        <member name="P:Sias.PipArm.SPipettingMethods.DefaultAspirationOffset">
            <summary>
            Default aspiration offset property.
            
            This property defines an offset to the cavities maximum height 
            where the aspiration is done in case of the software did not 
            define another offset or if liquid detection failed with the 
            option "Goto ZMax and aspirate" (ignore).
            </summary>
        </member>
        <member name="P:Sias.PipArm.SPipettingMethods.DefaultWashStationName">
            <summary>Default wash station name property</summary>
        </member>
        <member name="P:Sias.PipArm.SPipettingMethods.PumpGroups">
            <summary>pump groups property</summary>
        </member>
        <member name="P:Sias.PipArm.SPipettingMethods.AllTips">
            <summary>
            This property returns a tip map with all Y/Z devices usable for pipetting.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SPipettingMethods.ZPosArr">
            <summary>
            Returns an array with the actual Z positions of all tips of the pipetting device.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SPipettingMethods.OkTips">
             <summary>
             Ok tips: The actually usable tips.
            
             This member defines the actually usable tips. In case of any pipetting problem solved 
             with the skip option the concerned tip(s) are marked as "not usable" until the next 
             DropTips or Wash. This is done using the Ok Tip map.\n
             It is recommended, to set the Ok Tip map to all usable tips at the start of any pipetting 
             sequence.
             </summary>
        </member>
        <member name="P:Sias.PipArm.SPipettingMethods.BaseRobot">
            <summary>Base robot of the tip washer device property</summary>
        </member>
        <member name="P:Sias.PipArm.SPipettingMethods.DefaultWashStation">
            <summary>
            Get/Set default wash station property.
            
            This property defines the default wash station. 
            The default wash station is used if no other wash station is defined.
            If the Default wash station is never assigned, it will be retrieved at the 
            first access in the following way:
             - Get a list of the layouts wash stations
             - try finding the DefaultWashStationName on this list
             - if not found try getting Item DefaultWashStationName.
             - if not found try getting Item "Washstation".
             - if not found try getting Item "WashStation".
             - if not found try getting Item "Washstation1".
             - if not found try getting Item "WashStation1".
             .
            
            Each arm defines a default wash station. 
            If the default wash station is not defined, the driver tries to find a default one.
            </summary>
            TODO: optionally optimize default wash station by recognizing the (X) position.
        </member>
        <member name="P:Sias.PipArm.SPipettingMethods.DTRackHoldRetractLimit">
            <summary>
            Retract limit for DT holding property
            
            This static property is used to define the maximum hold move range.
            This can be used to limit the hold move, finally to save time as the 
            hold move will be slow and so it requires a lot of time if it will 
            have a long move range.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SPipettingMethods.MethodsSupported">
            <summary>
            Methods supported property.
            
            This property is used to verify the method block. 
            In case of the pipetting methods, it verifies if the arm is valid and 
            at least one pipetting Y/Z device is available.
            </summary>
            <value>True if execution possible otherwise false</value>
        </member>
        <member name="T:Sias.PipArm.SPipettingMethods.ErrorCodes">
            <summary>
            This static class keeps the error code constants of the \ref Sias::PipArm::SPipArmDevice errors.
            </summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingMethods.ErrorCodes.NotEnoughLiquidDetected">
            <summary>0x2001: No Liquid detected</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingMethods.ErrorCodes.UnexpectedFullCavity">
            <summary>0x2002: Unexpected full cavity</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingMethods.ErrorCodes.ClotDetected">
            <summary>0x2003: Clot Detected</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingMethods.ErrorCodes.TipsLost">
            <summary>0x2006: Tips lost in sequence. at tips check before drop we detected one or more missing tip(s)</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingMethods.ErrorCodes.TipDropError">
            <summary>0x2007: Unable to remove tip(s) from tip adapter(s)</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingMethods.ErrorCodes.TipNotRemoved">
            <summary>0x2008: Tip(s) from one or more tip adapter not removed. (Post drop check)</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingMethods.ErrorCodes.UnableToGetTips">
            <summary>0x2009: Invalid (bent) or no tip(s) found with adapter(s)</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingMethods.ErrorCodes.NoTipsAfterGet">
            <summary>0x2010: No tip(s) detected at tip adapter(s) (Post GetTips check)</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingMethods.ErrorCodes.NoTipsToGet">
            <summary>0x2017: No pickable {1} tip(s) found for adapter(s)</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingMethods.ErrorCodes.NoLiquidDetectedAtDispense">
            <summary>0x2020: No liquid detected at dispense</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingMethods.ErrorCodes.AdapterHasTip">
            <summary>0x2021: Tip(s) found at tip adapter(s)</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingMethods.ErrorCodes.PipettingAccessRefused">
            <summary>0x2100: Pipetting access refused when trying to access</summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingMethods.ErrorCodes.AccessRefused">
            <summary>0x2101: Access refused when trying to access</summary>
        </member>
        <member name="T:Sias.PipArm.SPipettingMethods.STipPositionCoordinateComparer">
            <summary>
            Tip position comparer.
            
            This comparer allows to sort tip positions by its X/Y positions. 
            Tip positions with smaller X values are sorted before those with 
            higher X value. If the X values are identical tip positions with 
            smaller Y values are sorted before the ones with higher Y values.
            </summary>
        </member>
        <member name="F:Sias.PipArm.SPipettingMethods.STipPositionCoordinateComparer._IgnoreRacks">
            <summary>Ignore racks on tip position sorting (default true) field</summary>
        </member>
        <member name="M:Sias.PipArm.SPipettingMethods.STipPositionCoordinateComparer.Compare(System.Object,System.Object)">
            <summary>
            Compare method
            
            This comparer allows to sort tip positions by its X/Y positions. 
            Cavities with smaller X values are sorted before those with higher 
            X value. If the X values are identical cavities with smaller Y
            values are sorted before the ones with higher Y values.
            </summary>
            <param name="x">first tip position</param>
            <param name="y">second tip position</param>
            <returns>-1, 0 or 1</returns>
        </member>
        <member name="P:Sias.PipArm.SPipettingMethods.STipPositionCoordinateComparer.IgnoreRacks">
            <summary>
            Ignore racks on tip position sorting (default true)
            
            This static property can be used to ignore recgonition of tip rack 
            names on sorting tip positions. The advantage of ignoring is that tip 
            positions on X can picked in one step. The disadvantage is that the 
            tip racks are not managed rack by rack.
            Default Value: true;
            </summary>
        </member>
        <member name="T:Sias.PipArm.SPipYZDevice">
            <summary>
            Pipetting Y/Z device class.
            
            The pipetting Y/Z device is a complex device representing the part of the pipetting 
            arm connected to the Y traverse. 
            </summary>
            <details>
            \ingroup    Dev_PipArm
            
            In addition to the standard Y- and Z- \nlink{Sias::Motor,SMotorDevice} the 
            pipetting Y/Z device includes a \nlink{Sias::PipPump,SPipPumpDevice}.
            
            The pipetting Y/Z device is derived from a standard Y/Z device. In addition to 
            the Y/Z device members the gripper Y/Z class implements 
             - properties for the needed pipetting pump configuration
             - properties for the needed tip adapter
             - a property for the tip state (\b see \nlink{Sias.PipArm,STipState})
             - methods for picking and dispensing liquid
             - a method to empty the tip
             .
            The derivation overwrites the ZWorktablePos and ZMotorPos to correct the heights 
            by the length of the tip adapter and the tip.
            
            \image html "SPipYZDevice.png"
            </details>
        </member>
        <member name="T:Sias.PipArm.IPipYZDevice">
            <summary>
            Pipetting Y/Z device interface.
            
            A pipetting Y/Z device is a complex device used for pipetting. It includes 
            the necessary base pipetting methods as well as the tip adapter and tip states.
            This interface is defined for usage in the \nlink{Sias.PipArm,SPipettingMethods}
            arm methods class.
            Important classes implementing IPipYZDevice: 
             - \nlink{Sias.PipArm,SPipYZDevice}
             - \nlink{Sias.CombiArm,SCombiYZDevice}
             .
            </summary>
        </member>
        <member name="M:Sias.PipArm.IPipYZDevice.InitRequired(Sias.BaseDev.SDeviceInitOptions)">
            <summary>
            Check if the default execution group gives an init request with the given init options.
            </summary>
            <param name="InitOptions">Init options</param>
            <returns>True if we have to init, false if not</returns>
        </member>
        <member name="M:Sias.PipArm.IPipYZDevice.Init(Sias.BaseDev.SDeviceInitOptions)">
             <summary>
             Init Y/Z device.
            
             Initialization sequence: \n
              - init Z motor (this move it up)
              - init Y motors 
             </summary>
             <param name="InitOptions">
             This should allow the Initialization only parts, but is not supported yet. 
             To keep applications compatible with older versions it is recommended
             to pass 0xFFFFFFFF for the init options. This forces an Initialization 
             of the complete arm.
             </param>
        </member>
        <member name="M:Sias.PipArm.IPipYZDevice.YWorktablePos(System.Double)">
            <summary>
            Calculate Y desk position from a given Y motor position
            </summary>
            <param name="YMotPos">Y motor position</param>
            <returns>Y desk position</returns>
        </member>
        <member name="M:Sias.PipArm.IPipYZDevice.YMotorPos(System.Double)">
            <summary>
            Calculate Y motor position from a given Y desk position
            </summary>
            <param name="YWorktablePos">Y desk position</param>
            <returns>Y motor position</returns>
        </member>
        <member name="M:Sias.PipArm.IPipYZDevice.PrepareYMove(System.Double,System.Double,System.Double)">
            <summary>
            Prepare Y motor move to an absolute worktable position.
            Take care there are no position validation checks. If there is another component 
            blocking the way you may get a movement blocked error.
            </summary>
            <param name="YWorktablePos">Worktable Y position</param>
            <param name="Speed">Y moving speed [mm/s]</param>
            <param name="Ramp">Y moving acceleration [mm/s²]</param>
        </member>
        <member name="M:Sias.PipArm.IPipYZDevice.PrepareRelativeYMove(System.Double,System.Double,System.Double)">
            <summary>
            Prepare relative Y motor move.
            Take care there are no position validation checks. If there is another component 
            blocking the way you may get a movement blocked error.
            </summary>
            <param name="YWorktablePos">Relative Y position in worktable coordinates [mm]</param>
            <param name="Speed">Y moving speed [mm/s]</param>
            <param name="Ramp">Y moving acceleration [mm/s²]</param>
        </member>
        <member name="M:Sias.PipArm.IPipYZDevice.ZWorktablePos(System.Double)">
            <summary>
            Calculate Z desk position from a given Z motor position
            </summary>
            <param name="ZMotPos">Z motor position</param>
            <returns>Z desk position</returns>
        </member>
        <member name="M:Sias.PipArm.IPipYZDevice.ZMotorPos(System.Double)">
            <summary>
            Calculate Z motor position from a given Z desk position
            </summary>
            <param name="ZWorktablePos">Z desk position</param>
            <returns>Z motor position</returns>
        </member>
        <member name="M:Sias.PipArm.IPipYZDevice.CheckZRange(System.Double)">
            <summary>
            This method checks and optionally limits the Z range without giving an error.
            In case of changing the position a warning is logged.
            </summary>
            <param name="WorkPos">Absolute destination worktable position</param>
            <returns>Optionally limited absolute destination worktable position</returns>
        </member>
        <member name="M:Sias.PipArm.IPipYZDevice.PrepareTravelMove(System.Double,System.Double,System.Double)">
            <summary>
            Prepare Z motor travel move if necessary.
            This method makes sure, that the Z motor moves at least to the defined travel height.
            If the Z motor is above the defined travel height it will not move.
            </summary>
            <param name="ZTravelWorktablePos">Worktable Z position</param>
            <param name="Speed">Z moving speed [mm/s]</param>
            <param name="Ramp">Z moving acceleration [mm/s²]</param>
            <returns></returns>
        </member>
        <member name="M:Sias.PipArm.IPipYZDevice.PrepareZMove(System.Double,System.Double,System.Double)">
            <summary>
            Prepare Z motor move to an absolute worktable position.
            Take care there are no position validation checks. If there is another component 
            blocking the way you may get a movement blocked error.
            </summary>
            <param name="ZWorktablePos">Worktable Z position</param>
            <param name="Speed">Z moving speed [mm/s]</param>
            <param name="Ramp">Z moving acceleration [mm/s²]</param>
        </member>
        <member name="M:Sias.PipArm.IPipYZDevice.PrepareRelativeZMove(System.Double,System.Double,System.Double)">
            <summary>
            Prepare relative Z motor move.
            Take care there are no position validation checks. If there is another component 
            blocking the way you may get a movement blocked error.
            </summary>
            <param name="ZWorktablePos">Relative Z position in worktable coordinates [mm]</param>
            <param name="Speed">Z moving speed [mm/s]</param>
            <param name="Ramp">Z moving acceleration [mm/s²]</param>
        </member>
        <member name="M:Sias.PipArm.IPipYZDevice.PrepareZScanMove(System.Double,System.Double,System.Double)">
            <summary>
            Prepare Z motor scan move to an absolute worktable position.
            The scan move gets the submerge way after detection. As we have no 
            way to have an acceleration on addition this will always use the modules 
            default acceleration!
            Take care there are no position validation checks. If there is another 
            component blocking the way you may get a movement blocked error.
            </summary>
            <param name="ZWorktablePos">Worktable Z position</param>
            <param name="Speed">Z moving speed [mm/s]</param>
            <param name="Submerge">Submerge steps after detection [mm]</param>
        </member>
        <member name="M:Sias.PipArm.IPipYZDevice.PrepareZBlockMove(System.Double,System.Byte,System.Double,System.Double)">
            <summary>
            Prepare Z motor block move to an absolute worktable position.
            Take care there are no position validation checks. If there is another component 
            blocking the way you may get a movement blocked error.
            </summary>
            <param name="ZWorktablePos">Worktable Z position</param>
            <param name="BlockMode">Block mode, this defines the moving force. In a normal 
            						configured system that means 1=strong, 2=middle, 3=weak</param>
            <param name="Speed">Z moving speed [mm/s]</param>
            <param name="Ramp">Z moving acceleration [mm/s²]</param>
        </member>
        <member name="M:Sias.PipArm.IPipYZDevice.SetLDSensitivity(System.Byte)">
            <summary>
            Set liquid detector sensitivity mode.
            The standard liquid detection systems have 4 different sensitivities.
             - 1 - sensitivity for fixed tips in tubes
             - 2 - sensitivity for fixed tips in MTPs
             - 3 - sensitivity for disposable tips in tubes
             - 4 - sensitivity for disposable tips in MTPs
             .
            Of course this sensitivities modes may be different on non standard robots.
            </summary>
            <param name="Sens">New liquid detector sensitivity mode</param>
            <returns>True if the new sensitivity mode was accepted</returns>
        </member>
        <member name="M:Sias.PipArm.IPipYZDevice.PreparePickLiquid(Sias.PipArm.SPipPar,System.Double,System.Double)">
            <summary>
            Pick liquid.
            This method prepares an aspiration at the actual position. Meanwhile it optionally 
            prepares a tracking down with the given track way.
            </summary>
            <param name="PipPar">Pipetting parameter (volume, speed and acceleration) for the aspiration</param>
            <param name="TWay">Tracking way while aspiration</param>
            <param name="TSpeed">Tracking speed while aspiration</param>
            <returns>Execution group of the prepared modules</returns>
        </member>
        <member name="M:Sias.PipArm.IPipYZDevice.PrepareDispLiquid(Sias.PipArm.SPipPar,System.Double,System.Double)">
            <summary>
            Dispense liquid.
            This method prepares a dispense at the actual position. Meanwhile it optionally 
            prepares a tracking up with the given track way.
            </summary>
            <param name="PipPar">Pipetting parameter (volume, speed and acceleration) for dispense</param>
            <param name="TWay">Tracking way while dispense</param>
            <param name="TSpeed">Tracking speed while dispense</param>
            <returns>Execution group of the prepared modules</returns>
        </member>
        <member name="M:Sias.PipArm.IPipYZDevice.PrepareEmptyTip(Sias.PipArm.SPipPar)">
            <summary>
            Empty tip.
            This method prepares the removal of all liquid known as remaining in the tip.
            Take care, if the amount of liquid exceeds 10000 µl (depending on dispense speed) you may get an timeout error.
            It is recommended to use Waste (DispLiquid) before calling empty tip in this case.
            </summary>
            <param name="PipPar">Pipetting parameter (volume, speed and acceleration) for dispense</param>
            <returns>Execution group of the prepared modules</returns>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.DefaultExecutionGroup">
            <summary>Default execution group for the Y/Z device property</summary>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.YMotor">
            <summary>
            Y Motor.
            </summary>
            <value></value>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.YFactor">
            <summary>
            Y motor rescaling factor. This factor allows to rescale the Y motor
            positions. Normally this is only used to revert the motor.
            </summary>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.YOffset">
            <summary>Y Offset</summary>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.YMax">
            <summary>
            Maximum Y motor move range [mm].
            </summary>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.ZMotor">
            <summary>
            Z Motor.
            </summary>
            <value></value>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.ZFactor">
            <summary>
            Z motor rescaling factor. This factor allows to rescale the Z motor
            positions. Normally this is only used to revert the motor.
            </summary>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.ZOffset">
            <summary>Z Offset</summary>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.ZMax">
            <summary>
            Maximum Z motor move range [mm].
            </summary>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.TravelSafetyMargin">
            <summary>
            Safety margin for travel calculations.
            
            This property defines a safety margin for the Y/Z device. This safety margin 
            is a circle around the middle of the Y/Z device which can be covered by the 
            Y/Z device. It is used to calculate an extended move rectangle for calculating 
            the travel height.
            </summary>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.DeviceName">
            <summary>
            Device name
            </summary>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.DeviceState">
            <summary>
            Get state of the YZ Device and all of its known sub devices
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.BaseFlags">
            <summary>
            Get the base flags of the YZ Device including all of its sub devices
            </summary>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.ExecutionGroup">
            <summary>
            Execution group property.
            
            This property can be used to get/set the execution group of all sub devices of the 
            Arm. Setting the execution group results in the same execution group for all 
            sub devices. Getting it will result in a binary of all sub device execution groups.
            </summary>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.YRange_Min">
            <summary>
            Minimum reachable Y worktable position for this Y/Z device
            </summary>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.YRange_Max">
            <summary>
            Maximum reachable Y worktable position for this Y/Z device
            </summary>
            <value></value>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.YSafetyMargin">
            <summary>
            Y safety margin property (virtual)
            
            This property is used to define a Y safety margin for other tips. Depending
            on the Y/Z device condition it may be that it neighbors need to keep a higher 
            distance as the origin init offset. As long as this feature is not needed the 
            Value can be left to 0.
            </summary>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.YWorktablePosition">
            <summary>
            Y worktable position from device.
            
            This property returns the last known Y motor position as worktable coordinates.
            </summary>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.YWorktablePositionFromDevice">
            <summary>
            Z worktable position from device.
            
            This property requests the current motor position from the Z motor device and 
            translates it to worktable coordinates.
            </summary>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.ZRange_Min">
            <summary>
            Minimum reachable Z worktable position for this Y/Z device
            </summary>
            <value></value>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.ZRange_Max">
            <summary>
            Maximum reachable Z worktable position for this Y/Z device
            </summary>
            <value></value>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.ZWorktablePosition">
            <summary>
            Z Worktable position from device.
            
            This property returns the last known Z motor position as worktable coordinates.
            </summary>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.ZWorktablePositionFromDevice">
            <summary>
            Z Worktable position from device.
            
            This property requests the current motor position from the Z motor device and 
            translates it to worktable coordinates.
            </summary>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.PipPump">
            <summary>Pipetting pump device property</summary>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.TipState">
            <summary>Tip state property</summary>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.TipAdapter">
            <summary>Tip adapter property</summary>
        </member>
        <member name="P:Sias.PipArm.IPipYZDevice.ZTipLength">
            <summary>
            Tip length property (from tip adapter).
            </summary>
            <value></value>
        </member>
        <member name="F:Sias.PipArm.SPipYZDevice._PipPump">
            <summary>Pipetting pump device field</summary>
        </member>
        <member name="F:Sias.PipArm.SPipYZDevice._TipAdapterName">
            <summary>Tip adapter name field</summary>
        </member>
        <member name="F:Sias.PipArm.SPipYZDevice._TipState">
            <summary>Tip state field</summary>
        </member>
        <member name="F:Sias.PipArm.SPipYZDevice._TipAdapter">
            <summary>Tip adapter field</summary>
        </member>
        <member name="M:Sias.PipArm.SPipYZDevice.GetErrorInfos">
            <summary>
            This interface function returns the default error messages which can be 
            generated by this device.
            </summary>
            <returns>A collection with error information</returns>
        </member>
        <member name="M:Sias.PipArm.SPipYZDevice.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Sias.PipArm.SPipYZDevice.#ctor(System.String)">
            <summary>
            XML string configuration constructor.
            This constructor creates a device by parsing the device parameters from 
            the given XML configuration string.
            </summary>
            <param name="Config">XML configuration string</param>
        </member>
        <member name="M:Sias.PipArm.SPipYZDevice.#ctor(System.String,Sias.Motor.SMotorDevice,System.Double,System.Int32,Sias.Motor.SMotorDevice,System.Double,System.Int32,Sias.PipPump.SPipPumpDevice)">
            <summary>
            Manual generation constructor.
            This constructor creates a device by using the given parameters.
            </summary>
            <param name="AdapterName">Tip adapter type name</param>
            <param name="YMotor">Y Motor device</param>
            <param name="YFactor">Y Factor</param>
            <param name="YOffset">Y Offset</param>
            <param name="ZMotor">Z Motor device</param>
            <param name="ZFactor">Z Factor</param>
            <param name="ZOffset">Z Offset</param>
            <param name="PipPump">Pipetting pump device</param>
        </member>
        <member name="M:Sias.PipArm.SPipYZDevice.PipYZArray(System.Int32,Sias.Motor.SMotorDevice,System.Double,System.Int32,Sias.Motor.SMotorDevice,System.Double,System.Int32,Sias.PipPump.SPipPumpDevice)">
            <summary>
            Create an Y/Z device array from the given parameters.
            
            The parameters will get modified for each Y/Z device in the following way:
             - increment module addresses by 1
             - YZDev.YOffset set to index * YOffset
             .
            </summary>
            <param name="NoOfTips">No of tips = no of Y/Z devices</param>
            <param name="YMotor">Y motor of first Y/Z device</param>
            <param name="YFactor">Y scaling factor</param>
            <param name="YOffset">Y scaling offset</param>
            <param name="ZMotor">Z motor of first Y/Z device</param>
            <param name="ZFactor">Z scaling factor</param>
            <param name="ZOffset">Z scaling offset</param>
            <param name="PipPump">Pipetting Pump of first Y/Z device</param>
            <returns>A pipetting Y/Z device array with the newly created pipetting Y/Z devices.</returns>
        </member>
        <member name="M:Sias.PipArm.SPipYZDevice.ZWorktablePos(System.Double)">
            <summary>
            Calculate Z desk position from a given Z motor position.
            </summary>
            <param name="ZMotPos">Z motor position</param>
            <returns>Z desk position</returns>
        </member>
        <member name="M:Sias.PipArm.SPipYZDevice.ZMotorPos(System.Double)">
            <summary>
            Calculate Z motor position from a given Z desk position.
            </summary>
            <param name="ZWorktablePos">Z desk position</param>
            <returns>Z motor position</returns>
        </member>
        <member name="M:Sias.PipArm.SPipYZDevice.Init(Sias.BaseDev.SDeviceInitOptions)">
            <summary>
            Init pipetting Y/Z device.
            This first calls the base initialization initializing the Z, X and Y motor. Then it 
            initializes the pipetting pump.
            Take care that the pipetting pump is not initialized above a wash station !
            </summary>
            <param name="InitOptions">not used yet</param>
        </member>
        <member name="M:Sias.PipArm.SPipYZDevice.PreparePickLiquid(Sias.PipArm.SPipPar,System.Double,System.Double)">
            <summary>
            Pick liquid.
            
            This method prepares an aspiration at the actual position. Meanwhile it optionally 
            prepares a tracking down with the given track way.
            </summary>
            <param name="PipPar">Pipetting parameter (volume, speed and acceleration) for the aspiration</param>
            <param name="TWay">Tracking way while aspiration</param>
            <param name="TSpeed">Tracking speed while aspiration</param>
            <returns>Execution group of the prepared modules</returns>
        </member>
        <member name="M:Sias.PipArm.SPipYZDevice.PrepareDispLiquid(Sias.PipArm.SPipPar,System.Double,System.Double)">
            <summary>
            Dispense liquid.
            This method prepares a dispense at the actual position. Meanwhile it optionally 
            prepares a tracking up with the given track way.
            </summary>
            <param name="PipPar">Pipetting parameter (volume, speed and acceleration) for the dispense</param>
            <param name="TWay">Tracking way while dispense</param>
            <param name="TSpeed">Tracking speed while dispense</param>
            <returns>Execution group of the prepared modules</returns>
        </member>
        <member name="M:Sias.PipArm.SPipYZDevice.PrepareEmptyTip(Sias.PipArm.SPipPar)">
            <summary>
            Empty tip.
            This method prepares the removal of all liquid known as remaining in the tip.
            Take care, if the amount of liquid exceeds 10000 µl (depending on dispense speed) you may get an timeout error.
            It is recommended to use Waste (DispLiquid) before calling empty tip in this case.
            </summary>
            <param name="PipPar">Pipetting parameter (volume, speed and acceleration) for dispense</param>
            <returns>Execution group of the prepared modules</returns>
        </member>
        <member name="M:Sias.PipArm.SPipYZDevice.AddArmMethods(Sias.BaseDev.SBaseArmMethodsCollection,Sias.BaseDev.SBaseArmDevice)">
            <summary>
            Add supported arm methods to given arm method collection a collection.
            </summary>
            <param name="ArmMethods"></param>
            <param name="Arm"></param>
            <remarks>
            Take care each arm should not have each method block more then once!
            </remarks>
            <returns>A collection of all supported arm method blocks</returns>
        </member>
        <member name="P:Sias.PipArm.SPipYZDevice.PipPump">
            <summary>Pipetting pump device property</summary>
        </member>
        <member name="P:Sias.PipArm.SPipYZDevice.TipAdapterName">
            <summary>Tip adapter name property</summary>
        </member>
        <member name="P:Sias.PipArm.SPipYZDevice.DefaultExecutionGroup">
            <summary>Default execution group for the Gripper Y/Z device property</summary>
        </member>
        <member name="P:Sias.PipArm.SPipYZDevice.TipState">
            <summary>Tip state property</summary>
        </member>
        <member name="P:Sias.PipArm.SPipYZDevice.TipAdapter">
            <summary>Tip adapter property</summary>
        </member>
        <member name="P:Sias.PipArm.SPipYZDevice.ZTipLength">
            <summary>
            Tip length property (from tip adapter).
            </summary>
            <value></value>
        </member>
        <member name="P:Sias.PipArm.SPipYZDevice.DeviceName">
            <summary>
            Name of the pipetting Y/Z device.
            Changing the name of the pipetting Y/Z device will result in changing the 
            names of all connected sub devices. 
            </summary>
        </member>
        <member name="P:Sias.PipArm.SPipYZDevice.ExecutionGroup">
            <summary>
            This property returns or sets the execution group of all sub modules connected to 
            this pipetting Y/Z device.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SPipYZDevice.DeviceState">
            <summary>
            Get Device state.
            </summary>
        </member>
        <member name="T:Sias.PipArm.SPipYZDevice.ErrorCodes">
            <summary>
            This static class keeps the error code constants of the \ref Sias::PipArm::SPipYZDevice errors.
            </summary>
        </member>
        <member name="F:Sias.PipArm.SPipYZDevice.ErrorCodes.TipAdpaterNotFound">
            <summary>0x3001: Configuraed tip adapter not found.</summary>
        </member>
        <member name="T:Sias.PipArm.SPipYZDeviceCollection">
            <summary>
            collection
            </summary>
        </member>
        <member name="M:Sias.PipArm.SPipYZDeviceCollection.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="P:Sias.PipArm.SPipYZDeviceCollection.Item(System.Int32)">
            <summary>
            Get/set the SBaseYZDevice at the specified index in the collection. 
            </summary>
            <param name="index">Index of the SBaseYZDevice</param>
            <returns>An SBaseYZDevice at each valid index.</returns>
        </member>
        <member name="P:Sias.PipArm.SPipYZDeviceCollection.Item(System.String)">
            <summary>
            Get/set the SPosition at the specified index in the collection. 
            </summary>
            <param name="device_name">Name of the Pipetting Y/Z device</param>
            <returns>An SPosition at each valid index.</returns>
        </member>
        <member name="T:Sias.PipArm.SPipPar">
            <summary>
            Pipetting parameter class.
            
            This class is used as method parameters to define the pipetting parameters
             - Volume		(amount of liquid to aspirate/dispense)
             - Speed		(Aspiration or Dispense speed)
             - Acceleration (Aspiration or Dispense acceleration)
             - Volume stop speed (not supported yet)
             .
            </summary>
        </member>
        <member name="F:Sias.PipArm.SPipPar._Volume">
            <summary>public volume</summary>
        </member>
        <member name="F:Sias.PipArm.SPipPar._Speed">
            <summary>public speed</summary>
        </member>
        <member name="F:Sias.PipArm.SPipPar._Accel">
            <summary>public acceleration</summary>
        </member>
        <member name="F:Sias.PipArm.SPipPar._StopSpeed">
            <summary>Pipetting stop speed [µl/s] field</summary>
        </member>
        <member name="M:Sias.PipArm.SPipPar.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a pipetting parameter class with the given 
             - Volume		(amount of liquid to aspirate/dispense)
             - speed		(Aspiration or Dispense speed)
             - Acceleration (Aspiration or Dispense acceleration)
             - StopSpeed    (Aspiration or Dispense stop speed)
             .
            </summary>
            <param name="Vol">Amount of liquid to aspirate/dispense</param>
            <param name="Speed">Aspiration or Dispense speed</param>
            <param name="Accel">Aspiration or Dispense acceleration</param>
            <param name="stopSpeed">Aspiration or Dispense stop speed</param>
        </member>
        <member name="M:Sias.PipArm.SPipPar.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a pipetting parameter class with the given 
             - Volume		(amount of liquid to aspirate/dispense)
             - speed		(Aspiration or Dispense speed)
             - Acceleration (Aspiration or Dispense acceleration)
             .
            </summary>
            <param name="Vol">Amount of liquid to aspirate/dispense</param>
            <param name="Speed">Aspiration or Dispense speed</param>
            <param name="Accel">Aspiration or Dispense acceleration</param>
        </member>
        <member name="M:Sias.PipArm.SPipPar.#ctor">
            <summary>
            Create an "empty" pipetting parameter class, no volume, no speed, no acceleration.
            </summary>
        </member>
        <member name="M:Sias.PipArm.SPipPar.#ctor(Sias.PipArm.SPipPar)">
            <summary>
            Create a copy of the given pipetting parameter class.
            </summary>
            <param name="OrgPar">origin pipetting parameter class</param>
        </member>
        <member name="M:Sias.PipArm.SPipPar.VolArr(Sias.PipArm.SPipPar[])">
            <summary>
            Calculate a volume array from an pipetting parameter class array.
            </summary>
            <param name="VolPar">Pipetting parameter class array</param>
            <returns>A Volume array with all volumes of the given pipetting parameter class array</returns>
        </member>
        <member name="M:Sias.PipArm.SPipPar.SpeedArr(Sias.PipArm.SPipPar[])">
            <summary>
            Calculate a speed array from an pipetting parameter class array.
            </summary>
            <param name="VolPar">Pipetting parameter class array</param>
            <returns>A speed array with all speeds of the given pipetting parameter class array</returns>
        </member>
        <member name="M:Sias.PipArm.SPipPar.AccelArr(Sias.PipArm.SPipPar[])">
            <summary>
            Calculate an acceleration array from an pipetting parameter class array.
            </summary>
            <param name="VolPar">Pipetting parameter class array</param>
            <returns>An acceleration array with all accelerations of the given pipetting parameter class array</returns>
        </member>
        <member name="M:Sias.PipArm.SPipPar.StopSpeedArr(Sias.PipArm.SPipPar[])">
            <summary>
            Calculate an acceleration array from an pipetting parameter class array.
            </summary>
            <param name="VolPar">Pipetting parameter class array</param>
            <returns>An acceleration array with all accelerations of the given pipetting parameter class array</returns>
        </member>
        <member name="P:Sias.PipArm.SPipPar.Volume">
            <summary>public volume property</summary>
        </member>
        <member name="P:Sias.PipArm.SPipPar.Speed">
            <summary>public speed property</summary>
        </member>
        <member name="P:Sias.PipArm.SPipPar.Accel">
            <summary>public acceleration property</summary>
        </member>
        <member name="P:Sias.PipArm.SPipPar.StopSpeed">
            <summary>Pipetting stop speed [µl/s] property</summary>
        </member>
        <member name="T:Sias.PipArm.SCavityPositionCoordinateComparer">
            <summary>
            Cavity position comparer.
            
            This comparer allows to sort cavities by its X/Y positions. 
            Cavities with smaller X values are sorted before those with higher 
            X value. If the X values are identical, cavities with smaller Y
            values are sorted before the ones with higher Y values.
            </summary>
        </member>
        <member name="M:Sias.PipArm.SCavityPositionCoordinateComparer.Compare(System.Object,System.Object)">
            <summary>
            Compare method.
            
            This comparer allows to sort cavities by its X/Y positions. 
            Cavities with smaller X values are sorted before those with higher 
            x value. If the X values are identical, cavities with smaller Y
            values are sorted before the ones with higher Y values.
            </summary>
        </member>
        <member name="T:Sias.PipArm.SPipArmDevice">
            <summary>
            Pipetting arm device class.
            
            The pipetting arm device is a complex device representing a pipetting arm on a 
            sias instrument.
            </summary>
            <details>
            \ingroup    Dev_PipArm
            
            A pipetting arm has an X motor and at least one pipetting Y/Z sub device with 
            Y- and Z- motors and a pipetting pump.
            
            In difference to the first SDK Version the pipetting arm does \b not implement
            any pipetting methods. Instead it implements a Pipetting property providing 
            a \nlink{Sias::PipArm,SPipettingMethods} class including the pipetting methods 
            as well as the additional configuration properties.
            
            \image html "SPipArmDevice.png"
            </details>
            <remarks>
            \b Remark:
            To make sure that the tips are out of the range of accessible
            objects before releasing the access mode it is needed to define a gripper 
            path. 
            </remarks>
            <example></example>
        </member>
        <member name="M:Sias.PipArm.SPipArmDevice.#ctor">
            <summary>
            Default constructor.
            
            Creates a new instance of the <b>SPipArmDevice</b> class.
            </summary>
        </member>
        <member name="M:Sias.PipArm.SPipArmDevice.#ctor(System.String)">
            <summary>
            XML Configuration constructor.
            </summary>
            <param name="Config"></param>
        </member>
        <member name="M:Sias.PipArm.SPipArmDevice.#ctor(Sias.RobotDev.SArmDeviceFlags,System.Double,Sias.Motor.SMotorDevice,System.Double,System.Int32,Sias.PipArm.SPipYZDeviceCollection,Sias.PipArm.SPipettingMethods)">
            <summary>
            Creates a new instance of the <b>SPipArmDevice</b> class by defining 
            the configuration data.
            </summary>
            <param name="Flags">Arm flags</param>
            <param name="ZTravel">Travel height</param>
            <param name="XMotor">X Motor</param>
            <param name="XFactor">X Motor Factor</param>
            <param name="XOffset">X Motor Offset</param>
            <param name="YZDevices">Pipetting Y/Z device collection</param>
            <param name="PipettingMethods">Pipetting methods and parameter</param>
        </member>
        <member name="M:Sias.PipArm.SPipArmDevice.Init(Sias.BaseDev.SDeviceInitOptions)">
            <summary>
            Initialize the pipetting arm device.
            </summary>
            <param name="InitOptions">Pipetting options</param>
        </member>
        <member name="P:Sias.PipArm.SPipArmDevice.YZDevices">
            <summary>
            Pipetting Y/Z device collection property.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SPipArmDevice.Pipetting">
            <summary>Pipetting methods and Parameters property</summary>
        </member>
        <member name="P:Sias.PipArm.SPipArmDevice.DeviceName">
             <summary>
             Name of the pipetting arm device.
            
             Changing the name of the pipetting arm device results in changing the 
             names of all connected sub devices. 
             </summary>
             <value></value>
        </member>
        <member name="T:Sias.PipArm.STipState">
            <summary>
            Tip state class.
            
            This class manages the tip states. The tip states include
             - a (sorted) list of liquids states (Names, errors, states and a volume)
             - the total volume in the tip
             - a state summary of the tip
             .
            
            Each tip at a pipetting device will typically have one tip state class.
            </summary>
        </member>
        <member name="F:Sias.PipArm.STipState._Liquids">
            <summary>Liquid state array list field</summary>
        </member>
        <member name="F:Sias.PipArm.STipState._State">
            <summary>Temporary liquid state</summary>
        </member>
        <member name="M:Sias.PipArm.STipState.#ctor(Sias.RobotDev.SYZDevice)">
            <summary>
            Default constructor.
            
            This constructor creates a tip state with no liquid.
            </summary>
        </member>
        <member name="M:Sias.PipArm.STipState.LiqState(System.Int32)">
            <summary>
            Get liquid at the given index.
            </summary>
            <param name="inx">Liquid index</param>
            <returns>The liquid at the given index</returns>
        </member>
        <member name="M:Sias.PipArm.STipState.AddLiquid(Sias.Core.Interfaces.ILiquid,Sias.Core.Interfaces.ICavity)">
            <summary>
            Add new liquid picked from a cavity to the tip state.
            </summary>
            <param name="Liq">Liquid to add</param>
            <param name="SrcCav">Source cavity</param>
        </member>
        <member name="M:Sias.PipArm.STipState.AddLiquid(Sias.Core.Interfaces.ILiquid,System.Double,System.Double,Sias.Core.Interfaces.ICavity)">
            <summary>
            Add new liquid picked from a cavity to the tip state.
            </summary>
            <param name="Liq">Liquid to add</param>
            <param name="volume">Liquid volume</param>
            <param name="Missing">Missing volume</param>
            <param name="SrcCav">Source cavity</param>
        </member>
        <member name="M:Sias.PipArm.STipState.AddLiquid(Sias.Core.Interfaces.ILiquid)">
            <summary>
            Add new liquid from anywhere (we have no history and no cavity name).
            </summary>
            <param name="Liq">Liquid to add</param>
        </member>
        <member name="M:Sias.PipArm.STipState.AddSystemLiquid(Sias.Core.Interfaces.ILiquid)">
            <summary>
            Add system liquid to the tip state.
            
            In difference to AddLiquid this method adds the liquid as first liquid in the list,
            that means it is the last liquid dispensed.
            </summary>
            <param name="Liq">The liquid to add (Typically system liquid)</param>
        </member>
        <member name="M:Sias.PipArm.STipState.AddSystemLiquid(System.Double)">
            <summary>
            Add system liquid to the tip state.
            
            In difference to AddLiquid this method adds the liquid as first liquid in the list,
            that means it is the last liquid dispensed.
            </summary>
            <param name="vol">The amount of system liquid to add [µl]</param>
        </member>
        <member name="M:Sias.PipArm.STipState.GetLiquid(System.Double,Sias.Core.Interfaces.ICavity)">
            <summary>
            Get liquid from tip.
            
            This method removes the given amount of liquid from the tip state and returns a summary 
            of this liquid. Typically the result of this method will be passed as a mixture of liquids 
            to the destination tube.
            </summary>
            <param name="volume">Volume of liquid to get</param>
            <param name="ToCav">Cavity where the liquid is transferred to</param>
            <returns>A mixture of all liquids removed from the tip state</returns>
        </member>
        <member name="M:Sias.PipArm.STipState.GetLiquid(System.Double)">
            <summary>
            Get liquid from tip.
            
            This method removes the given amount of liquid from the tip state and returns a summary 
            of this liquid. Typically the result of this method will be passed as a mixture of liquids 
            to the destination tube.
            </summary>
            <param name="volume">Volume of liquid to get</param>
            <returns>A mixture of all liquids removed from the tip state</returns>
        </member>
        <member name="M:Sias.PipArm.STipState.WasteLiquid(System.Double)">
            <summary>
            Waste liquid from tip.
            
            This method removes the given amount of liquid from the tip state and returns a summary 
            of this liquid. Typically the result of this method will be passed as a mixture of liquids 
            to the destination tube.
            </summary>
            <param name="volume">Volume of liquid to get</param>
            <returns>A mixture of all liquids removed from the tip state</returns>
        </member>
        <member name="M:Sias.PipArm.STipState.AddState(Sias.Core.Interfaces.SLiquidState.EM)">
            <summary>
            Add a state value to tip state.
            </summary>
            <param name="State">Additional state</param>
        </member>
        <member name="M:Sias.PipArm.STipState.DelState(Sias.Core.Interfaces.SLiquidState.EM)">
            <summary>
            Remove a state value from tip state.
            </summary>
            <param name="State">State value to remove</param>
        </member>
        <member name="M:Sias.PipArm.STipState.Clear">
            <summary>
            Clear tip state.
            
            This removes all liquids and states from the tip state. Typically this will be 
            called when empty the tip.
            </summary>
        </member>
        <member name="P:Sias.PipArm.STipState.Liquids">
            <summary>Liquid/gas list of the tip state</summary>
        </member>
        <member name="P:Sias.PipArm.STipState.TempState">
            <summary>Temporary liquid state</summary>
        </member>
        <member name="P:Sias.PipArm.STipState.State">
            <summary>Liquid state summary property</summary>
        </member>
        <member name="P:Sias.PipArm.STipState.ErrorValue">
            <summary>Error state value property</summary>
        </member>
        <member name="P:Sias.PipArm.STipState.LiquidValue">
            <summary>Liquid state value property</summary>
        </member>
        <member name="P:Sias.PipArm.STipState.Volume">
            <summary>Actual tip volume property</summary>
        </member>
        <member name="P:Sias.PipArm.STipState.Name">
            <summary>Actual tip name property</summary>
        </member>
        <member name="P:Sias.PipArm.STipState.TipID">
            <summary>
            Tip identification  property.
            The tip ID defines an unique ID for each tip of a robot. It is defined by
            (100 * ArmId) + TipIndex.
            </summary>
        </member>
        <member name="P:Sias.PipArm.STipState.ActInx">
            <summary>
            Actual liquid index.
            </summary>
        </member>
        <member name="P:Sias.PipArm.STipState.ActLiquid">
            <summary>
            Actual liquid in the tips.
            As "actual liquid" we define the next liquid which would be dispensed if we would dispense 
            yet. If the last step was an aspiration it is identical to the last liquid aspirated.
            </summary>
            <value></value>
        </member>
        <member name="T:Sias.PipArm.STipState.SLiquidWithHistory">
            <summary>
            combined Liquid with history.
            
            this class is only used in the tip state
            </summary>
        </member>
        <member name="F:Sias.PipArm.STipState.SLiquidWithHistory._History">
            <summary>History field</summary>
        </member>
        <member name="M:Sias.PipArm.STipState.SLiquidWithHistory.#ctor">
            <summary>
            Default constructor: liquid class without liquid.
            </summary>
        </member>
        <member name="M:Sias.PipArm.STipState.SLiquidWithHistory.#ctor(Sias.Core.Interfaces.ILiquid)">
            <summary>
            Constructor: Single liquid with volume and state.
            </summary>
        </member>
        <member name="M:Sias.PipArm.STipState.SLiquidWithHistory.SetState(Sias.Core.Interfaces.SLiquidState,System.Int32)">
            <summary>
            Set the liquid state.
            
            Using this method will add/update a state changed history entry
            </summary>
            <param name="sta">State change</param>
            <param name="tipID">Tip identification (100*armID + TipIndex + 1) </param>
        </member>
        <member name="P:Sias.PipArm.STipState.SLiquidWithHistory.History">
            <summary>History property</summary>
        </member>
        <member name="T:Sias.PipArm.STipState.SLiquidWithHistoryCollection">
            <summary>
            Liquid collection.
            
            This class handles a collection of objects implementing the 
            ILiquid interface.
            </summary>
        </member>
        <member name="M:Sias.PipArm.STipState.SLiquidWithHistoryCollection.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="P:Sias.PipArm.STipState.SLiquidWithHistoryCollection.Item(System.Int32)">
            <summary>
            Get/set the ILiquid at the specified index in the collection. 
            </summary>
            <param name="index">Index of the ILiquid</param>
            <returns>An ILiquid at each valid index.</returns>
        </member>
        <member name="T:Sias.PipArm.SPipSteps">
            <summary>
            Pipetting steps class.
            
            This class is used to calculate and hold the needed pipetting steps to access 
            cavities or tip positions. Each pipetting step includes
             - The tips to use at the pipetting step
             - The worktable X coordinate range allowed for the step
             - The worktable Y coordinate ranges for each tip allowed for the step
             .
            </summary>
        </member>
        <member name="M:Sias.PipArm.SPipSteps.#ctor(System.Int32)">
            <summary>
            Initialize a new instance of the <b>SPipSteps</b> class for \a nTips Tips.
            </summary>
            <param name="nTips">No of tips using this pipetting steps</param>
        </member>
        <member name="M:Sias.PipArm.SPipSteps.Clear">
            <summary>
            Clear all steps.
            </summary>
        </member>
        <member name="M:Sias.PipArm.SPipSteps.Calculate(Sias.PipArm.STipMap,Sias.RobotDev.SArmDevice,Sias.Core.SNameCollection)">
            <summary>
            Calculate the needed pipetting steps for accessing the tip destination areas defined 
            by the PipStep parameter. 
            </summary>
            <param name="UsedTips">The list of used tips</param>
            <param name="Arm">The pipetting arm used for access</param>
            <param name="PosName">The Names for the destination positions</param>
        </member>
        <member name="M:Sias.PipArm.SPipSteps.Calculate(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection,Sias.RobotDev.SArmDevice)">
            <summary>
            Calculate the needed pipetting steps for accessing \a cavities with \a UsedTips of \a Arm.
            </summary>
            <param name="UsedTips">The tips used for access</param>
            <param name="Cavities">The cavities to access</param>
            <param name="Arm">The pipetting arm used for access</param>
        </member>
        <member name="M:Sias.PipArm.SPipSteps.Calculate(Sias.PipArm.STipMap,Sias.Core.Interfaces.STipPositionCollection,Sias.RobotDev.SArmDevice)">
            <summary>
            Calculate the needed pipetting steps for accessing \a TipPos with \a UsedTips of \a Arm.
            </summary>
            <param name="UsedTips">The tips used for access</param>
            <param name="TipPos">The tip positions to access</param>
            <param name="Arm">The pipetting arm used for access</param>
        </member>
        <member name="M:Sias.PipArm.SPipSteps.CreatePipSteps(Sias.PipArm.STipMap,Sias.Core.Interfaces.SCavityCollection,Sias.RobotDev.SArmDevice)">
            <summary>
            Create a pipetting step object including the needed pipetting steps for 
            accessing \a cavities with \a UsedTips of \a Arm.
            </summary>
            <param name="UsedTips">The tips used for access</param>
            <param name="Cavities">The cavities to access</param>
            <param name="Arm">The pipetting arm used for access</param>
            <returns>The pipetting steps object with the needed pipetting steps</returns>
        </member>
        <member name="P:Sias.PipArm.SPipSteps.Steps">
            <summary>
            Get the steps of the SPipSteps.
            </summary>
        </member>
        <member name="T:Sias.PipArm.SPipSteps.SPipStep">
            <summary>
            Internal single pipetting step class.
            </summary>
        </member>
        <member name="F:Sias.PipArm.SPipSteps.SPipStep._Tips">
            <summary>Tips used at this pipetting step field</summary>
        </member>
        <member name="F:Sias.PipArm.SPipSteps.SPipStep._XMin">
            <summary>Minimum X value field</summary>
        </member>
        <member name="F:Sias.PipArm.SPipSteps.SPipStep._XMax">
            <summary>Maximum X value field</summary>
        </member>
        <member name="F:Sias.PipArm.SPipSteps.SPipStep._YMin">
            <summary>Minimum Y values (different for each tip) field</summary>
        </member>
        <member name="F:Sias.PipArm.SPipSteps.SPipStep._YMax">
            <summary>Maximum Y values (different for each tip) field</summary>
        </member>
        <member name="M:Sias.PipArm.SPipSteps.SPipStep.#ctor(System.Int32)">
            <summary>
            Create a new instance of the <b>PipStep</b> class.
            </summary>
            <param name="nTips">No of tips</param>
        </member>
        <member name="M:Sias.PipArm.SPipSteps.SPipStep.#ctor">
            <summary>
            Create a new instance of the <b>PipStep</b> class.
            </summary>
        </member>
        <member name="M:Sias.PipArm.SPipSteps.SPipStep.Clear">
            <summary>
            Clear/Reset pipetting step.
            </summary>
        </member>
        <member name="P:Sias.PipArm.SPipSteps.SPipStep.Tips">
            <summary>Tips used at this pipetting step property</summary>
        </member>
        <member name="P:Sias.PipArm.SPipSteps.SPipStep.XMin">
            <summary>Minimum X value property</summary>
        </member>
        <member name="P:Sias.PipArm.SPipSteps.SPipStep.XMax">
            <summary>Maximum X value property</summary>
        </member>
        <member name="P:Sias.PipArm.SPipSteps.SPipStep.YMin">
            <summary>Minimum Y values (different for each tip) property</summary>
        </member>
        <member name="P:Sias.PipArm.SPipSteps.SPipStep.YMax">
            <summary>Maximum Y values (different for each tip) property</summary>
        </member>
    </members>
</doc>
