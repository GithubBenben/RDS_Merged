;===========================================================================
; CANMSG.INI    declaration of Sias CAN Messages textes with parameters
;
; Version:      1.4.00
; Date/Visa:    27.01.2014 / MiKl
;
;===========================================================================
;
; Change History:
;
;   15.03.2005  - Support for Wash/prime message
;		- Support for ReadPlate message
;		- Support for Get BC Buf-Info Message and answer
;		- Support for Set BC reader message
;   10.03.2005  - Support for Port data messages in 8 and 16 bit format
;   27.01.2014  - Support for Stop message
;		- Support for get/set dynamic parameters
;
;===========================================================================
;
; Format Types
;
; b byte      unsigned (1 Byte)
; x hex byte           (1 Byte)
; c char               (1 Byte)
; i integer   signed   (2 Byte)
; w word      unsigned (2 Byte)
; h hex word           (2 Byte)
;
; d data hex
; s data string
;
; f flags              (1 Byte)
;
; n Module name        (only %0n)
; a Module Adress      (only %0a)
;
; m Message Command    (only %0m) 
;
; 

[ShortFormat]
; activate the following line to enable Short messages
;[MessageFormat]
; Common Module answers
Command_Def=%002a:%002m%1x%2x%3x%4x%5x%6x%7x;
Command_1A=%002a:Exec(%1x)

; deactivate the following line to enable readable Short messages
;[Readable Short Messages] 
Command_00=%002a:A_%1x;
Command_01=%002a:I1f%1xp%4iv%6ie%2h;
Command_02=%002a:I2a%1xb%2wc%4wd%6w;
Command_03=%002a:I3t%204hV%5b.%6xb%7bi%1b;
Command_04=%002a:S_%7x%6x%5x%4x%3x%2x.%1x;
; Identification and Address selection
Command_10=%002a:Is%7x%6x%5x%4x%3x%2x.%1x;
Command_11=%002a:Ss%7x%6x%5x%4x%3x%2x.%1x;
Command_12=%002a:Sa%1xs%7x%6x%5x%4x%3x%2x;
Command_13=%002a:Sd%1xs%7x%6x%5x%4x%3x%2x;
; Common Module messages
Command_18=%002a:Se%1x;
Command_19=%002a:Clr;
Command_1B=%002a:Ri%1b;
Command_1C=%002a:Reset;
Command_1F=%002a:Stp%1x;
; Motor Messages 
Command_20=%002a:Io%1xs%2ia%4i;
Command_21=%002a:Mo%1xp%2is%4ia%6i;
Command_27=%002a:Sl%12b;
; Port command(s) 
Command_28=%002a:So%1xp%2bv%3bt%4i;
Command_29=%002a:Gp%1b;
Command_2A=%002a:Pp%1bv%22b);
; RS232 Port commands
Command_2C=%002a:So%1bd%2c%3c%4c%5c%6c%7c;
Command_2D=%002a:Gf%1bo%2bl%3b;
Command_2E=%002a:Ro%1bd%2c%3c%4c%5c%6c%7c;
Command_2F=%002a:Co%1Xc%2bd%3x%4x%5x%6x%7x;
; Dilutor Messages 
Command_30=%002a:So%1xv%2x;
Command_31=%002a:Eo%1xs%2ia%4i;
Command_32=%002a:Po%1xv%2is%4ia%6i;
Command_33=%002a:Do%1xv%2is%4ia%6i;
Command_34=%002a:Fo%1xv%2is%4ia%6i;
; Barcode rack commands 
Command_60=%002a:Mo%1xr%2b;
Command_61=%002a:Ro%1xr%2bt%3bp%4b-%5b;
; Shaker / Centrifuge commands
Command_70=%002a:To%1xs%2ia%4it%6i;
; dynamic parameter management
Command_F6=%0-10n DP[%1b]=%2w
Command_F7=%0-10n DP[%1b] is %2w
; common messages
Command_F8=%002a:GoBoot;
Command_F9=%002a:GoMain;
Command_FB=%002a:GetMem(%3x%2x%1x,%4b)
Command_FC=%002a:MemData(%1x %2x %3x %4x %5x %6x %7x)
Command_FD=%002a:DelMem(%3x%2x%1x,%4b)
Command_FE=%002a:SetMem(%3x%2x%1x,%4x %5x %6x %7x)


[LongFormat]
; activate the following line to enable long messages
[MessageFormat]
; Common Module answers
Command_Def=%0-10n %0m      %1x %2x %3x %4x %5x %6x %7x
Command_00=%0-10n Ackn.: Cmd=%1x     %2x
Command_01=%0-10n Info1: Pos1=%46i     Pos2=%67i    Error=  %2h    Flags=%110fDL?WEAP________I
Command_02=%0-10n Info2: res= %16b     res1=%27i    res2=%47i    res3=    %67i
Command_03=%0-10n Info3: Type=%26i     V%5b.%6x           Build%77b    iv=%1b
Command_04=%0-10n SerNo   %7x%6x%5x%4x%3x%2x.%1x
Command_0F=%0-10n ALERT: Type=%13x ID=%24h
; Identification and Address selection
Command_10=%0-10n Identify(%7x%6x%5x%4x%3x%2x.%1x)
Command_11=%0-10n Select(%7x%6x%5x%4x%3x%2x.%1x)
Command_12=%0-10n SetAdr(%7x%6x%5x%4x%3x%2x,%1x)
Command_13=%0-10n SetDefaultAdr(%7x%6x%5x%4x%3x%2x,%1x)
; Common Module messages
Command_18=%0-10n SetExecGroup(%1x)
Command_19=%0-10n ClearCommands()
Command_1A=%0-10n Execute(%1x)
Command_1B=%0-10n RequestInfo(%1b)
Command_1C=%0-10n Reset()
Command_1F=%0-10n Stop Execution(%1x)
; Motor Messages 
Command_20=%0-10n Init(%26i,%46i,%1fP???HiIR________)
Command_21=%0-10n Move(%27i,%46i,%66i,%1fP?42HiIR________)
Command_27=%0-10n SetLqMode(%12b)
; Port command(s) 
Command_28=%0-10n SetPort(%12x,%22b,%32b,%46i,(%66i))
Command_29=%0-10n GetPort(%12b)
Command_2A=%0-10n PortData(%12b,%22i,%32b,(%26i,%46i))
; RS232 Port commands
Command_2C=%0-10n SetRS232_Buffer(%1b,%2c%3c%4c%5c%6c%7c)
Command_2D=%0-10n GetRS232_Buffer(%1b,%2x,%3b)
Command_2E=%0-10n RS232_Data(%1x,%2c%3c%4c%5c%6c%7c)
Command_2F=%0-10n RS232_Cmd(%1x,%2b,%3x %4x %5x %6x %7x)
; Dilutor Messages 
Command_30=%0-10n SetValve(%2x,%1fP???HiIR________)
Command_31=%0-10n Empty(%26i,%46i,%1fP???????________)
Command_32=%0-10n Pick(%27i,%46i,%66i,%1fP???????________)
Command_33=%0-10n Disp(%27i,%46i,%66i,%1fP???????________)
Command_34=%0-10n Flush(%27i,%46i,%66i,%1fP???????________)
; Washer commands
Command_40=%0-10n Wash/Prime(P%22b,(%32b),R=%44h,V=%66i,%1fP???????________)
; reader commands
Command_44=%0-10n ReadPlate(Filter=(P%22b,%32b,%42b),DM=%52b,PM=%62b,%1fP???????________)
; Barcode rack commands 
Command_60=%0-10n MoveRack(%2b,%1fP???????________)
Command_61=%0-10n ReadRack(%2b,%3b,%4b .. %5b,%1fP???????________)
Command_62=%0-10n Get BC-Info(%1b)
Command_63=%0-10n BC-Info(%1b): pos=%2i, Wide=%7b, Adr=%404h, l=%6b)
Command_64=%0-10n Get BC-BufInfo
Command_65=%0-10n BC-BufInfo: MaxTubes=%1b, Adr=%2h, BC-Size=%4b, Pos-Ofs=%5b, Len-Ofs=%6b, BC-Ofs=%7b
Command_66=%0-10n Set BCR(%2b,%1fP???????________)
; Incubators and vacuum unit
Command_68=%0-10n SetTarget(%26i,%46i,%1fP?42HiIR________)
Command_69=%0-10n SetGates(%2f87654321________,%1fP?42HiIR________)
Command_6A=%0-10n SetAccess(%2b,%1fP?42HiIR________)
Command_6B=%0-10n GetRealData(%1b)
Command_6C=%0-10n RealData(%1b)=%2i (t=%4i,l=%6i)
; Shaker / Centrifuge commands
Command_70=%0-10n TimeMove(%27i,%46i,%66i,%1fP???????________)
; dynamic parameter management
Command_F6=%0-10n Set DynPar[%1b]=%2w
Command_F7=%0-10n DynPar[%1b] is %2w
; common messages
Command_F8=%0-10n StartBoot()
Command_F9=%0-10n StartMain()
Command_FB=%0-10n GetMem(%3x%2x%1x,%4b)
Command_FC=%0-10n MemData(%1x %2x %3x %4x %5x %6x %7x)
Command_FD=%0-10n DelMem(%3x%2x%1x,%4b)
Command_FE=%0-10n SetMem(%3x%2x%1x,%4x %5x %6x %7x)


