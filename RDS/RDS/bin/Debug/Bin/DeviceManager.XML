<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DeviceManager</name>
    </assembly>
    <members>
        <member name="T:Sias.DeviceManager.Model.SRobot">
            <summary>
            Summary description for SRobot.
            </summary>
        </member>
        <member name="M:Sias.DeviceManager.Model.SRobot.ToString">
            <summary>
            Retrieves a string that indicates the current object.
            </summary>
            <returns>The string format of the object.</returns>
        </member>
        <member name="T:Sias.DeviceManager.SDeviceManager">
            <summary>
            Central class for accessing device drivers in the Nelson environment
            </summary>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceManager.GetErrorInfos">
            <summary>
            This interface function returns the default error messages which can be 
            generated by this device.
            </summary>
            <returns>A collection with error information</returns>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceManager.#ctor">
            <summary>
            Initializes a new instance of the <b>SDeviceManager</b> class.
            </summary>
        </member>
        <member name="F:Sias.DeviceManager.SDeviceManager.manager">
            <summary>The one and only device manager instance</summary>
        </member>
        <member name="F:Sias.DeviceManager.SDeviceManager.dbManager">
            <summary>Database manager for db access</summary>
        </member>
        <member name="F:Sias.DeviceManager.SDeviceManager.classLock">
            <summary>class lock</summary>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceManager.GetManager">
            <summary>
            Instantiator/Factory method
            
            This static method gets the one and only device manager. 
            If no device manager is available yet, a new device manager instance will get created.
            </summary>
            <returns>The one and only device manager</returns>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceManager.IgnoreErrorHandler(System.Object,Sias.Core.SErrorArgs,System.Boolean)">
            <summary>
            This error handler ignores all errors depending on the possible options:
             - On possible SErrorOptions.ok option          it returns SErrorResult.Ok
             - On possible SErrorOptions.Ignore option      it returns SErrorResult.Ignore
             - On possible SErrorOptions.Continue option    it returns SErrorResult.Continue
             .
            All other options are not handled.
            </summary>
            <param name="sender">The object generated the error</param>
            <param name="errorArgs">The error handling parameters</param>
            <param name="handled">True if error already handled, otherwise false</param>
            <returns>True if the error could be handled, otherwise false</returns>
        </member>
        <member name="F:Sias.DeviceManager.SDeviceManager.robot">
            <summary>The current robot</summary>
        </member>
        <member name="F:Sias.DeviceManager.SDeviceManager.error">
            <summary>Error status of the manager</summary>
        </member>
        <member name="F:Sias.DeviceManager.SDeviceManager.availableArmList">
            <summary>contains all SArmDevices (or subclasses thereof)</summary>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceManager.CreateRobotDevice(System.Type)">
            <summary>Create a robot device</summary>
            <param name="t">Robot device type</param>
            <returns>The created robot device instance</returns>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceManager.CreateArmDevice(System.Type)">
            <summary>Create an arm device</summary>
            <param name="t">Arm device type</param>
            <returns>The created arm device instance</returns>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceManager.CreateBaseDevice(System.Type)">
            <summary>Create a simple device</summary>
            <param name="t">simple device type</param>
            <returns>The created simple device instance</returns>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceManager.ReadDeviceDriver(System.String)">
            <summary>
            Read all devices from driver device assembly
            </summary>
            <param name="filename">Assembly file name</param>
            <returns></returns>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceManager.ReadDeviceDrivers">
            <summary>
            Read all device drivers found in configured device path
            </summary>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceManager.IsFileName(System.String)">
            <summary>
            Check if the given layout component name has to be loaded from layout 
            or from db
            </summary>
            <param name="name">layout component name</param>
            <returns>True if name has to be loaded from file, otherwise false.</returns>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceManager.LoadPath(System.String,System.String)">
            <summary>
            create a full file path from given file name
            </summary>
            <param name="FileName">The file name</param>
            <param name="AddInfo">additional extension</param>
            <returns>A full path to the file</returns>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceManager.SavePath(System.String,System.String)">
            <summary>
            create a full file path from given file name
            </summary>
            <param name="FileName">The file name</param>
            <param name="AddInfo">additional extension</param>
            <returns>A full path to the file</returns>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceManager.DoOverwrite(System.String,System.String,Sias.Core.SSaveOptions)">
            <summary>
            This methods checks whether the specified object is allowed to get overwritten or not.
            </summary>
            <param name="aKind">The kind (type) of object to overwrite (File, layout, item, ...)</param>
            <param name="aName">The name (identification) of the object to overwrite</param>
            <param name="options">The used save option parameter</param>
            <returns>True if overwriting if allowed, otherwise false</returns>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceManager.GetDeviceType(System.String)">
            <summary>
            Get a device type by device type name
            </summary>
            <param name="typeName">Device type name</param>
            <returns>The device type of this name</returns>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceManager.GetAccessibleDevices">
            <summary>
            Get a list of accessible device types
            </summary>
            <returns>A list of accessible device types</returns>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceManager.LoadRobot(System.String)">
            <summary>
            Load a robot from db or xml file
            
            This method loads a robot from database or from an xml file. If the given
            file name contains a directory or ends with an ".xml" extension the method
            tries to load the robot from xml file else from db.
            </summary>
            <param name="DeviceOrFileName">Device name or xml file name</param>
            <returns>The loaded robot or null in case of errors</returns>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceManager.SaveRobot(System.String,Sias.BaseDev.SBaseRobotDevice,Sias.Core.SSaveOptions)">
            <summary>
            Save robot to db or xml file
            </summary>
            <param name="DeviceOrFileName">Device name or xml file name</param>
            <param name="robot">Robot to save</param>
            <param name="options">The save options</param>
            <returns>True if saving successful, false if not</returns>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceManager.GetRobotList(System.String)">
            <summary>
            Get a list of available robots (not implemented yet!)
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceManager.LoadDevice(System.String)">
            <summary>
            Load a device from db or xml file
            </summary>
            <param name="DeviceOrFileName">Device name or xml file name</param>
            <returns>The loaded device</returns>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceManager.SaveDevice(System.String,Sias.BaseDev.SBaseDevice,Sias.Core.SSaveOptions)">
            <summary>
            Save device to db or xml file
            </summary>
            <param name="DeviceOrFileName">Device name or xml file name</param>
            <param name="device">The device to save</param>
            <param name="options">The save options</param>
            <returns>True if saving successful, false if not</returns>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceManager.GetDeviceList(System.String)">
            <summary>
            Get a list of available devices (not implemented yet!)
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceManager.Edit">
            <summary>
            Edit (robot) device
            
            The device editor/installer has import and export buttons for editing
            device xml files.
            </summary>
        </member>
        <member name="P:Sias.DeviceManager.SDeviceManager.CurrentRobot">
            <summary>
            Get/Set the CurrentRobot of the SDeviceManager
            </summary>
        </member>
        <member name="P:Sias.DeviceManager.SDeviceManager.Error">
            <summary>Error status of the manager</summary>
        </member>
        <member name="P:Sias.DeviceManager.SDeviceManager.DBPrefix">
            <summary>
            Gets the DeviceDBPrefix of the SDeviceManager
            </summary>
        </member>
        <member name="T:Sias.DeviceManager.SDeviceManager.ErrorCodes">
            <summary>
            This static class keeps the error code constants of the \ref Sias::DeviceManager::SDeviceManager errors.
            </summary>
        </member>
        <member name="F:Sias.DeviceManager.SDeviceManager.ErrorCodes.NoError">
            <summary>0x0000: No error occurred</summary>
        </member>
        <member name="F:Sias.DeviceManager.SDeviceManager.ErrorCodes.NoRobotConfiguration">
            <summary>0x0001: No robot configuration available</summary>
        </member>
        <member name="F:Sias.DeviceManager.SDeviceManager.ErrorCodes.UnableToLoadRobotConfiguration">
            <summary>0x0004: Robot configuration could not be loaded</summary>
        </member>
        <member name="F:Sias.DeviceManager.SDeviceManager.ErrorCodes.UnableToSaveRobotConfiguration">
            <summary>0x0008: Robot configuration could not be saved</summary>
        </member>
        <member name="F:Sias.DeviceManager.SDeviceManager.ErrorCodes.NoDeviceConfiguration">
            <summary>0x0010: No device configuration available</summary>
        </member>
        <member name="F:Sias.DeviceManager.SDeviceManager.ErrorCodes.UnableToLoadDeviceConfiguration">
            <summary>0x0040: Device configuration could not be loaded</summary>
        </member>
        <member name="F:Sias.DeviceManager.SDeviceManager.ErrorCodes.UnableToSaveDeviceConfiguration">
            <summary>0x0080: Device configuration could not be saved</summary>
        </member>
        <member name="T:Sias.DeviceManager.Model.SDriver">
            <summary>
            Summary description for SDriver.
            </summary>
        </member>
        <member name="T:Sias.DeviceManager.SDeviceInstaller">
             <summary>
             Device installer form
            
             This dialog is used as device installer/editor.
             </summary>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceInstaller.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceInstaller.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceInstaller.#ctor(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <b>SDeviceInstaller</b> class.
            </summary>
            <param name="robots"></param>
            <param name="arms"></param>
            <param name="devices"></param>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceInstaller.SDeviceInstaller_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            This method is called when the SDeviceInstaller's FormClosing event has been fired.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> that fired the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.FormClosingEventArgs"/> of the event.</param>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceInstaller.EnableDisableControls">
            <summary>
            Enable / disable selection depending controls 
            </summary>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceInstaller.RemoveRobot(Sias.DeviceManager.Model.SRobot)">
            <summary>
            remove the robot device 
            </summary>
            <param name="robot">the robot device to remove</param>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceInstaller.RemoveArm(Sias.DeviceManager.Model.SArm)">
            <summary>
            Remove an arm device
            </summary>
            <param name="arm">The arm device to remove</param>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceInstaller.RemoveDevice(Sias.DeviceManager.Model.SDevice)">
            <summary>
            remove a device
            </summary>
            <param name="device">the device to remove</param>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceInstaller.ImportRobot(Sias.DeviceManager.Model.SRobot,Sias.BaseDev.SBaseRobotDevice)">
            <summary>
            Import a robot to device installer
            </summary>
            <param name="robot">the device installer robot structure</param>
            <param name="RobotDevice">The robot configuration</param>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceInstaller.importButton_Click(System.Object,System.EventArgs)">
            <summary>
            This method is called when the importButton's Click event has been fired.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> that fired the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> of the event.</param>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceInstaller.exportButton_Click(System.Object,System.EventArgs)">
            <summary>
            This method is called when the exportButton's Click event has been fired.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> that fired the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> of the event.</param>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceInstaller.LoadButton_Click(System.Object,System.EventArgs)">
            <summary>
            This method is called when the LoadButton's Click event has been fired.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> that fired the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> of the event.</param>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceInstaller.SaveBtn_Click(System.Object,System.EventArgs)">
            <summary>
            This method is called when the SaveBtn's Click event has been fired.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> that fired the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> of the event.</param>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceInstaller.ExitButton_Click(System.Object,System.EventArgs)">
            <summary>
            This method is called when the ExitButton's Click event has been fired.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> that fired the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> of the event.</param>
        </member>
        <member name="M:Sias.DeviceManager.SDeviceInstaller.propertyGrid_PropertyChanged(System.Object,VisualHint.SmartPropertyGrid.PropertyChangedEventArgs)">
            <summary>
            This method is called when the propertyGrid's PropertyChanged event has been fired.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> that fired the event.</param>
            <param name="e">The <see cref="T:VisualHint.SmartPropertyGrid.PropertyChangedEventArgs"/> of the event.</param>
        </member>
        <member name="P:Sias.DeviceManager.SDeviceInstaller.AvailableRobots">
            <summary>Gets the a list of available robot types</summary>
            <value></value>
        </member>
        <member name="P:Sias.DeviceManager.SDeviceInstaller.AvailableArms">
            <summary>Gets the a list of available robot arm types</summary>
        </member>
        <member name="P:Sias.DeviceManager.SDeviceInstaller.AvailableDevices">
            <summary>Gets the a list of available standard device types</summary>
        </member>
        <member name="P:Sias.DeviceManager.SDeviceInstaller.AvailableRobotsBox">
            <summary>
            Gets the AvailableRobotsBox of the SDeviceInstaller
            </summary>
            <value></value>
        </member>
        <member name="T:Sias.DeviceManager.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Sias.DeviceManager.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Sias.DeviceManager.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:Sias.DeviceManager.Model.SDevice.ToString">
            <summary>
            Retrieves a string that indicates the current object.
            </summary>
            <returns>The string format of the object.</returns>
        </member>
        <member name="T:Sias.DeviceManager.Model.SArm">
            <summary>
            Summary description for SArm.
            </summary>
        </member>
        <member name="M:Sias.DeviceManager.Model.SArm.ToString">
            <summary>
            Retrieves a string that indicates the current object.
            </summary>
            <returns>The string format of the object.</returns>
        </member>
        <member name="T:Sias.DeviceManager.Model.SConfiguration">
            <summary>
            Summary description for SRobotConfiguration.
            </summary>
        </member>
    </members>
</doc>
